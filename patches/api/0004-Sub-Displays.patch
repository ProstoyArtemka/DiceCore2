From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: ProstoyArtemka <ProstoyArtemka@yandex.ru>
Date: Thu, 4 Jan 2024 22:22:27 +0700
Subject: [PATCH] Sub Displays


diff --git a/src/main/java/org/ospaindustries/block/CustomBlock.java b/src/main/java/org/ospaindustries/block/CustomBlock.java
index 2ebc277c50aab1c50674fd590a6d4dd1c471af29..8a954bbe8beefbabfdc8fef3a6a7ef34b86a75ff 100644
--- a/src/main/java/org/ospaindustries/block/CustomBlock.java
+++ b/src/main/java/org/ospaindustries/block/CustomBlock.java
@@ -5,6 +5,7 @@ import org.bukkit.Material;
 import org.bukkit.NamespacedKey;
 import org.bukkit.Particle;
 import org.bukkit.block.Block;
+import org.bukkit.entity.Display;
 import org.bukkit.entity.ItemDisplay;
 import org.bukkit.entity.Player;
 import org.bukkit.event.block.BlockBreakEvent;
@@ -16,16 +17,20 @@ import org.bukkit.util.Transformation;
 import org.jetbrains.annotations.Nullable;
 import org.ospaindustries.item.CustomItem;
 import org.ospaindustries.utils.CustomLoot;
+import org.ospaindustries.utils.DisplayBuilder;
 import org.ospaindustries.utils.InstrumentMaterial;
 import org.ospaindustries.utils.InstrumentType;
 
+import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Optional;
 
 public class CustomBlock {
     public static NamespacedKey BLOCK_KEY = new NamespacedKey("dice_core", "block_key");
     public static NamespacedKey BLOCK_DURABILITY_KEY = new NamespacedKey("dice_core", "block_durability");
     public static NamespacedKey BLOCK_POSITION_KEY = new NamespacedKey("dice_core", "block_position_key");
+    public static NamespacedKey BLOCK_SUB_DISPLAY = new NamespacedKey("dice_core", "block_sub_display");
 
     private static final HashMap<String, CustomBlock> registeredBlocks = new HashMap<>();
 
@@ -39,8 +44,9 @@ public class CustomBlock {
     private final CustomItem item;
     private Block block;
     private ItemDisplay mainDisplay;
+    private List<DisplayBuilder> displayBuilders;
 
-    CustomBlock(String tag, int customModelData, CustomLoot loot, CustomBlockBehavior behavior, InstrumentType type, InstrumentMaterial material, int durability, CustomItem item) {
+    CustomBlock(String tag, int customModelData, CustomLoot loot, CustomBlockBehavior behavior, InstrumentType type, InstrumentMaterial material, int durability, CustomItem item, List<DisplayBuilder> displayBuilders) {
         this.tag = tag;
         this.customModelData = customModelData;
         this.loot = loot;
@@ -49,6 +55,7 @@ public class CustomBlock {
         this.instrumentType = type;
         this.instrumentMaterial = material;
         this.item = item;
+        this.displayBuilders = displayBuilders;
     }
 
     @Nullable
@@ -150,6 +157,12 @@ public class CustomBlock {
         transformation.getScale().set(1.05, 1.05, 1.05);
         transformation.getTranslation().set(-0.025, -0.025, -0.025);
 
+        for (DisplayBuilder displayBuilder : displayBuilders) {
+            Display display = displayBuilder.get(location.toCenterLocation());
+
+            display.getPersistentDataContainer().set(BLOCK_SUB_DISPLAY, PersistentDataType.BOOLEAN, true);
+        }
+
         result.block.setType(Material.BARRIER);
         result.mainDisplay.setItemStack(getDisplayItemStack());
         result.mainDisplay.setTransformation(transformation);
@@ -161,6 +174,10 @@ public class CustomBlock {
         return result;
     }
 
+    public List<Display> getSubDisplays() {
+        return block.getLocation().toCenterLocation().getNearbyEntitiesByType(Display.class, 0.25f).stream().filter(d -> d.getPersistentDataContainer().has(BLOCK_SUB_DISPLAY)).toList();
+    }
+
     public void breakBlock(boolean dropLoot, @Nullable Player player) {
         BlockBreakEvent event = new BlockBreakEvent(block, player);
         getBehavior().blockBreak(event);
@@ -169,6 +186,9 @@ public class CustomBlock {
             for (ItemStack stack : loot.getLoot())
                 block.getWorld().dropItemNaturally(block.getLocation().toCenterLocation(), stack);
 
+        for (Display display : getSubDisplays())
+            display.remove();
+
         block.setType(Material.AIR);
         mainDisplay.remove();
 
@@ -206,6 +226,6 @@ public class CustomBlock {
 
     @Override
     public CustomBlock clone() {
-        return new CustomBlock(tag, customModelData, loot, behavior, instrumentType, instrumentMaterial, maxDurability, item);
+        return new CustomBlock(tag, customModelData, loot, behavior, instrumentType, instrumentMaterial, maxDurability, item, displayBuilders);
     }
 }
diff --git a/src/main/java/org/ospaindustries/block/CustomBlockBuilder.java b/src/main/java/org/ospaindustries/block/CustomBlockBuilder.java
index c515b4337debda387603fca007ba9e4a2a00b31f..502b7c14d27857ccd1c4e14718b25f1ff6144b6c 100644
--- a/src/main/java/org/ospaindustries/block/CustomBlockBuilder.java
+++ b/src/main/java/org/ospaindustries/block/CustomBlockBuilder.java
@@ -1,9 +1,11 @@
 package org.ospaindustries.block;
 
 import org.bukkit.Material;
+import org.bukkit.entity.Display;
 import org.ospaindustries.item.CustomItem;
 import org.ospaindustries.item.CustomItemBuilder;
 import org.ospaindustries.utils.CustomLoot;
+import org.ospaindustries.utils.DisplayBuilder;
 import org.ospaindustries.utils.InstrumentMaterial;
 import org.ospaindustries.utils.InstrumentType;
 
@@ -25,6 +27,7 @@ public class CustomBlockBuilder {
     private int itemModelData = -1;
     private String itemDisplayName = "";
     private Material itemMaterial = Material.BARRIER;
+    private final ArrayList<DisplayBuilder> displayBuilders = new ArrayList<>();
 
     public CustomBlockBuilder(String tag) {
         this.tag = tag;
@@ -74,6 +77,12 @@ public class CustomBlockBuilder {
         return this;
     }
 
+    public CustomBlockBuilder addDisplay(DisplayBuilder displayBuilder) {
+        displayBuilders.add(displayBuilder);
+
+        return this;
+    }
+
     public CustomBlockBuilder addItemLore(String... lorePart) {
         itemLore.addAll(Arrays.stream(lorePart).toList());
 
@@ -110,7 +119,7 @@ public class CustomBlockBuilder {
         if (CustomBlock.getRegisteredBlocks().containsKey(tag))
             throw new RuntimeException("Can't register block with tag \"" + tag + "\", this block is already registered.");
 
-        CustomBlock block = new CustomBlock(tag, customModelData, customLoot, behavior, type, material, maxDurability, customItem);
+        CustomBlock block = new CustomBlock(tag, customModelData, customLoot, behavior, type, material, maxDurability, customItem, displayBuilders);
         CustomBlock.getRegisteredBlocks().put(tag, block);
     }
 }
