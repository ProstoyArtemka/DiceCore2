From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: ProstoyArtemka <ProstoyArtemka@yandex.ru>
Date: Wed, 3 Jan 2024 18:30:21 +0700
Subject: [PATCH] Release


diff --git a/src/main/java/org/bukkit/Location.java b/src/main/java/org/bukkit/Location.java
index 9bbd928f7d513ca317cd27beffa61e5111f5ffb0..d5bad5d9724c79a98851bc2733bce90f3fd00e5e 100644
--- a/src/main/java/org/bukkit/Location.java
+++ b/src/main/java/org/bukkit/Location.java
@@ -1197,4 +1197,8 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
         return new Location(world, this.x(), this.y(), this.z(), this.getYaw(), this.getPitch());
     }
     // Paper end
+
+    public static String locationToString(Location location) {
+        return location.getX() + "_" + location.getY() + "_" + location.getZ() + "_" + location.getWorld().getName();
+    }
 }
diff --git a/src/main/java/org/bukkit/block/Block.java b/src/main/java/org/bukkit/block/Block.java
index 49974558799830d827f9ccd65a8bafee3fb0376b..0364e838218ec801ad6b5a55f1b81155f882644e 100644
--- a/src/main/java/org/bukkit/block/Block.java
+++ b/src/main/java/org/bukkit/block/Block.java
@@ -20,6 +20,7 @@ import org.bukkit.util.VoxelShape;
 import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
+import org.ospaindustries.block.CustomBlock;
 
 /**
  * Represents a block. This is a live object, and only one Block may exist for
@@ -786,5 +787,13 @@ public interface Block extends Metadatable, Translatable, net.kyori.adventure.tr
     default float getDestroySpeed(@NotNull ItemStack itemStack, boolean considerEnchants) {
         return this.getBlockData().getDestroySpeed(itemStack, considerEnchants);
     }
+
+    default boolean isCustom() {
+        return CustomBlock.fromBlock(this) != null;
+    }
+
+    default CustomBlock toCustom() {
+        return CustomBlock.fromBlock(this);
+    }
     // Paper end - destroy speed API
 }
diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java
index 1d0fd7ff8449f815a7d980af0b378181ea8bf8d8..1ed99683d110268f51bf95c35b778472ad44194b 100644
--- a/src/main/java/org/bukkit/entity/Entity.java
+++ b/src/main/java/org/bukkit/entity/Entity.java
@@ -24,6 +24,7 @@ import org.jetbrains.annotations.ApiStatus;
 import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
+import org.ospaindustries.entity.CustomEntity;
 
 /**
  * Represents a base entity in the world
@@ -1107,4 +1108,12 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      */
     @NotNull String getScoreboardEntryName();
     // Paper end - entity scoreboard name
+
+    default boolean isCustom() {
+        return CustomEntity.fromEntity(this) != null;
+    }
+
+    default CustomEntity toCustom() {
+        return CustomEntity.fromEntity(this);
+    }
 }
diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java
index 36e3fbc727cd748aa138f52976154ba32954cd87..f0d13f5c6d71e11fbbafd13737a67decd30c2475 100644
--- a/src/main/java/org/bukkit/inventory/ItemStack.java
+++ b/src/main/java/org/bukkit/inventory/ItemStack.java
@@ -15,8 +15,10 @@ import org.bukkit.enchantments.Enchantment;
 import org.bukkit.inventory.meta.Damageable;
 import org.bukkit.inventory.meta.ItemMeta;
 import org.bukkit.material.MaterialData;
+import org.bukkit.persistence.PersistentDataType;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
+import org.ospaindustries.item.CustomItem;
 
 /**
  * Represents a stack of items.
@@ -1005,4 +1007,24 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
         return type.isAir() || amount <= 0;
     }
     // Paper end
+
+    @Nullable
+    public CustomItem toCustomItem() {
+        if (!isCustom()) return null;
+        String tag = getItemMeta().getPersistentDataContainer().get(CustomItem.DICE_CORE_CUSTOM_ITEM_KEY, PersistentDataType.STRING);
+
+        CustomItem customItem = CustomItem.getRegisteredItems().get(tag).clone();
+        customItem.setItemMeta(getItemMeta());
+
+        return customItem;
+    }
+
+    public boolean isCustom() {
+        if (getItemMeta() == null) return false;
+        String tag = getItemMeta().getPersistentDataContainer().get(CustomItem.DICE_CORE_CUSTOM_ITEM_KEY, PersistentDataType.STRING);
+
+        if (tag == null) return false;
+
+        return CustomItem.getRegisteredItems().containsKey(tag);
+    }
 }
