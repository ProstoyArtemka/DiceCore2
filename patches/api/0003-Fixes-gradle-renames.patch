From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: ProstoyArtemka <ProstoyArtemka@yandex.ru>
Date: Wed, 3 Jan 2024 19:05:38 +0700
Subject: [PATCH] Fixes & gradle renames


diff --git a/src/main/java/org/ospaindustries/event/ArmorEquipEvent.java b/src/main/java/org/ospaindustries/event/ArmorEquipEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..b76f469bc58c38fd15843dcb862e4de7a5e14fa2
--- /dev/null
+++ b/src/main/java/org/ospaindustries/event/ArmorEquipEvent.java
@@ -0,0 +1,137 @@
+package org.ospaindustries.event;
+
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+import org.bukkit.inventory.ItemStack;
+
+public class ArmorEquipEvent extends PlayerEvent implements Cancellable {
+
+    private static final HandlerList handlers = new HandlerList();
+    private boolean cancel = false;
+    private final EquipMethod equipType;
+    private final ArmorType type;
+    private ItemStack oldArmorPiece, newArmorPiece;
+
+    /**
+     * @param player The player who put on / removed the armor.
+     * @param type The ArmorType of the armor added
+     * @param oldArmorPiece The ItemStack of the armor removed.
+     * @param newArmorPiece The ItemStack of the armor added.
+     */
+    public ArmorEquipEvent(final Player player, final EquipMethod equipType, final ArmorType type, final ItemStack oldArmorPiece, final ItemStack newArmorPiece){
+        super(player);
+        this.equipType = equipType;
+        this.type = type;
+        this.oldArmorPiece = oldArmorPiece;
+        this.newArmorPiece = newArmorPiece;
+    }
+
+    /**
+     * Gets a list of handlers handling this event.
+     *
+     * @return A list of handlers handling this event.
+     */
+    public static HandlerList getHandlerList(){
+        return handlers;
+    }
+
+    /**
+     * Gets a list of handlers handling this event.
+     *
+     * @return A list of handlers handling this event.
+     */
+    @Override
+    public final HandlerList getHandlers(){
+        return handlers;
+    }
+
+    /**
+     * Sets if this event should be cancelled.
+     *
+     * @param cancel If this event should be cancelled.
+     */
+    public final void setCancelled(final boolean cancel){
+        this.cancel = cancel;
+    }
+
+    /**
+     * Gets if this event is cancelled.
+     *
+     * @return If this event is cancelled
+     */
+    public final boolean isCancelled(){
+        return cancel;
+    }
+
+    public final ArmorType getType(){
+        return type;
+    }
+
+    /**
+     * Returns the last equipped armor piece, could be a piece of armor, or null
+     */
+    public final ItemStack getOldArmorPiece(){
+        return oldArmorPiece;
+    }
+
+    public final void setOldArmorPiece(final ItemStack oldArmorPiece){
+        this.oldArmorPiece = oldArmorPiece;
+    }
+
+    /**
+     * Returns the newly equipped armor, could be a piece of armor, or null
+     */
+    public final ItemStack getNewArmorPiece(){
+        return newArmorPiece;
+    }
+
+    public final void setNewArmorPiece(final ItemStack newArmorPiece){
+        this.newArmorPiece = newArmorPiece;
+    }
+
+    /**
+     * Gets the method used to either equip or unequip an armor piece.
+     */
+    public EquipMethod getMethod(){
+        return equipType;
+    }
+
+    public enum EquipMethod{// These have got to be the worst documentations ever.
+        /**
+         * When you shift click an armor piece to equip or unequip
+         */
+        SHIFT_CLICK,
+        /**
+         * When you drag and drop the item to equip or unequip
+         */
+        DRAG,
+        /**
+         * When you manually equip or unequip the item. Use to be DRAG
+         */
+        PICK_DROP,
+        /**
+         * When you right click an armor piece in the hotbar without the inventory open to equip.
+         */
+        HOTBAR,
+        /**
+         * When you press the hotbar slot number while hovering over the armor slot to equip or unequip
+         */
+        HOTBAR_SWAP,
+        /**
+         * When in range of a dispenser that shoots an armor piece to equip.<br>
+         * Requires the spigot version to have {@link org.bukkit.event.block.BlockDispenseArmorEvent} implemented.
+         */
+        DISPENSER,
+        /**
+         * When an armor piece is removed due to it losing all durability.
+         */
+        BROKE,
+        /**
+         * When you die causing all armor to unequip
+         */
+        DEATH,
+        ;
+    }
+}
diff --git a/src/main/java/org/ospaindustries/event/ArmorListener.java b/src/main/java/org/ospaindustries/event/ArmorListener.java
new file mode 100644
index 0000000000000000000000000000000000000000..d2872e5d1cd8622c28984e8c2062dbc5a0d0d826
--- /dev/null
+++ b/src/main/java/org/ospaindustries/event/ArmorListener.java
@@ -0,0 +1,194 @@
+package org.ospaindustries.event;
+
+import org.bukkit.Bukkit;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Event;
+import org.bukkit.event.EventHandler;
+import org.bukkit.event.EventPriority;
+import org.bukkit.event.Listener;
+import org.bukkit.event.block.Action;
+import org.bukkit.event.entity.PlayerDeathEvent;
+import org.bukkit.event.inventory.*;
+import org.bukkit.event.player.PlayerInteractEvent;
+import org.bukkit.event.player.PlayerItemBreakEvent;
+import org.bukkit.inventory.ItemStack;
+import java.util.List;
+
+import org.bukkit.Material;
+import org.bukkit.event.Event.Result;
+
+
+import java.util.List;
+
+public class ArmorListener implements Listener {
+    private final List<String> blockedMaterials;
+
+    public ArmorListener(List<String> blockedMaterials){
+        this.blockedMaterials = blockedMaterials;
+    }
+    //Event Priority is highest because other plugins might cancel the events before we check.
+
+    @EventHandler(priority =  EventPriority.HIGHEST, ignoreCancelled = true)
+    public final void inventoryClick(final InventoryClickEvent e){
+        boolean shift = false, numberkey = false;
+        if(e.isCancelled()) return;
+        if(e.getAction() == InventoryAction.NOTHING) return;// Why does this get called if nothing happens??
+        if(e.getClick().equals(ClickType.SHIFT_LEFT) || e.getClick().equals(ClickType.SHIFT_RIGHT)){
+            shift = true;
+        }
+        if(e.getClick().equals(ClickType.NUMBER_KEY)){
+            numberkey = true;
+        }
+        if(e.getSlotType() != InventoryType.SlotType.ARMOR && e.getSlotType() != InventoryType.SlotType.QUICKBAR && e.getSlotType() != InventoryType.SlotType.CONTAINER) return;
+        if(e.getClickedInventory() != null && !e.getClickedInventory().getType().equals(InventoryType.PLAYER)) return;
+        if (!e.getInventory().getType().equals(InventoryType.CRAFTING) && !e.getInventory().getType().equals(InventoryType.PLAYER)) return;
+        if(!(e.getWhoClicked() instanceof Player)) return;
+        ArmorType newArmorType = ArmorType.matchType(shift ? e.getCurrentItem() : e.getCursor());
+        if(!shift && newArmorType != null && e.getRawSlot() != newArmorType.getSlot()){
+            // Used for drag and drop checking to make sure you aren't trying to place a helmet in the boots slot.
+            return;
+        }
+        if(shift){
+            newArmorType = ArmorType.matchType(e.getCurrentItem());
+            if(newArmorType != null){
+                boolean equipping = true;
+                if(e.getRawSlot() == newArmorType.getSlot()){
+                    equipping = false;
+                }
+                if(newArmorType.equals(ArmorType.HELMET) && (equipping ? isAirOrNull(e.getWhoClicked().getInventory().getHelmet()) : !isAirOrNull(e.getWhoClicked().getInventory().getHelmet())) || newArmorType.equals(ArmorType.CHESTPLATE) && (equipping ? isAirOrNull(e.getWhoClicked().getInventory().getChestplate()) : !isAirOrNull(e.getWhoClicked().getInventory().getChestplate())) || newArmorType.equals(ArmorType.LEGGINGS) && (equipping ? isAirOrNull(e.getWhoClicked().getInventory().getLeggings()) : !isAirOrNull(e.getWhoClicked().getInventory().getLeggings())) || newArmorType.equals(ArmorType.BOOTS) && (equipping ? isAirOrNull(e.getWhoClicked().getInventory().getBoots()) : !isAirOrNull(e.getWhoClicked().getInventory().getBoots()))){
+                    ArmorEquipEvent armorEquipEvent = new ArmorEquipEvent((Player) e.getWhoClicked(), ArmorEquipEvent.EquipMethod.SHIFT_CLICK, newArmorType, equipping ? null : e.getCurrentItem(), equipping ? e.getCurrentItem() : null);
+                    Bukkit.getServer().getPluginManager().callEvent(armorEquipEvent);
+                    if(armorEquipEvent.isCancelled()){
+                        e.setCancelled(true);
+                    }
+                }
+            }
+        }else{
+            ItemStack newArmorPiece = e.getCursor();
+            ItemStack oldArmorPiece = e.getCurrentItem();
+            if(numberkey){
+                if(e.getClickedInventory().getType().equals(InventoryType.PLAYER)){// Prevents shit in the 2by2 crafting
+                    // e.getClickedInventory() == The players inventory
+                    // e.getHotBarButton() == key people are pressing to equip or unequip the item to or from.
+                    // e.getRawSlot() == The slot the item is going to.
+                    // e.getSlot() == Armor slot, can't use e.getRawSlot() as that gives a hotbar slot ;-;
+                    ItemStack hotbarItem = e.getClickedInventory().getItem(e.getHotbarButton());
+                    if(!isAirOrNull(hotbarItem)){// Equipping
+                        newArmorType = ArmorType.matchType(hotbarItem);
+                        newArmorPiece = hotbarItem;
+                        oldArmorPiece = e.getClickedInventory().getItem(e.getSlot());
+                    }else{// Unequipping
+                        newArmorType = ArmorType.matchType(!isAirOrNull(e.getCurrentItem()) ? e.getCurrentItem() : e.getCursor());
+                    }
+                }
+            }else{
+                if(isAirOrNull(e.getCursor()) && !isAirOrNull(e.getCurrentItem())){// unequip with no new item going into the slot.
+                    newArmorType = ArmorType.matchType(e.getCurrentItem());
+                }
+                // e.getCurrentItem() == Unequip
+                // e.getCursor() == Equip
+                // newArmorType = ArmorType.matchType(!isAirOrNull(e.getCurrentItem()) ? e.getCurrentItem() : e.getCursor());
+            }
+            if(newArmorType != null && e.getRawSlot() == newArmorType.getSlot()){
+                ArmorEquipEvent.EquipMethod method = ArmorEquipEvent.EquipMethod.PICK_DROP;
+                if(e.getAction().equals(InventoryAction.HOTBAR_SWAP) || numberkey) method = ArmorEquipEvent.EquipMethod.HOTBAR_SWAP;
+                ArmorEquipEvent armorEquipEvent = new ArmorEquipEvent((Player) e.getWhoClicked(), method, newArmorType, oldArmorPiece, newArmorPiece);
+                Bukkit.getServer().getPluginManager().callEvent(armorEquipEvent);
+                if(armorEquipEvent.isCancelled()){
+                    e.setCancelled(true);
+                }
+            }
+        }
+    }
+
+    @EventHandler(priority =  EventPriority.HIGHEST)
+    public void playerInteractEvent(PlayerInteractEvent e){
+        if(e.useItemInHand().equals(Result.DENY))return;
+        //
+        if(e.getAction() == Action.PHYSICAL) return;
+        if(e.getAction() == Action.RIGHT_CLICK_AIR || e.getAction() == Action.RIGHT_CLICK_BLOCK){
+            Player player = e.getPlayer();
+            if(!e.useInteractedBlock().equals(Result.DENY)){
+                if(e.getClickedBlock() != null && e.getAction() == Action.RIGHT_CLICK_BLOCK && !player.isSneaking()){// Having both of these checks is useless, might as well do it though.
+                    // Some blocks have actions when you right-click them which stops the client from equipping the armor in hand.
+                    Material mat = e.getClickedBlock().getType();
+                    for(String s : blockedMaterials){
+                        if(mat.name().equalsIgnoreCase(s)) return;
+                    }
+                }
+            }
+            ArmorType newArmorType = ArmorType.matchType(e.getItem());
+            if(newArmorType != null){
+                if(newArmorType.equals(ArmorType.HELMET) && isAirOrNull(e.getPlayer().getInventory().getHelmet()) || newArmorType.equals(ArmorType.CHESTPLATE) && isAirOrNull(e.getPlayer().getInventory().getChestplate()) || newArmorType.equals(ArmorType.LEGGINGS) && isAirOrNull(e.getPlayer().getInventory().getLeggings()) || newArmorType.equals(ArmorType.BOOTS) && isAirOrNull(e.getPlayer().getInventory().getBoots())){
+                    ArmorEquipEvent armorEquipEvent = new ArmorEquipEvent(e.getPlayer(), ArmorEquipEvent.EquipMethod.HOTBAR, ArmorType.matchType(e.getItem()), null, e.getItem());
+                    Bukkit.getServer().getPluginManager().callEvent(armorEquipEvent);
+                    if(armorEquipEvent.isCancelled()){
+                        e.setCancelled(true);
+                        player.updateInventory();
+                    }
+                }
+            }
+        }
+    }
+
+    @EventHandler(priority =  EventPriority.HIGHEST, ignoreCancelled = true)
+    public void inventoryDrag(InventoryDragEvent event){
+        // getType() seems to always be even.
+        // Old Cursor gives the item you are equipping
+        // Raw slot is the ArmorType slot
+        // Can't replace armor using this method making getCursor() useless.
+        ArmorType type = ArmorType.matchType(event.getOldCursor());
+        if(event.getRawSlots().isEmpty()) return;// Idk if this will ever happen
+        if(type != null && type.getSlot() == event.getRawSlots().stream().findFirst().orElse(0)){
+            ArmorEquipEvent armorEquipEvent = new ArmorEquipEvent((Player) event.getWhoClicked(), ArmorEquipEvent.EquipMethod.DRAG, type, null, event.getOldCursor());
+            Bukkit.getServer().getPluginManager().callEvent(armorEquipEvent);
+            if(armorEquipEvent.isCancelled()){
+                event.setResult(Result.DENY);
+                event.setCancelled(true);
+            }
+        }
+    }
+
+    @EventHandler
+    public void itemBreakEvent(PlayerItemBreakEvent e){
+        ArmorType type = ArmorType.matchType(e.getBrokenItem());
+        if(type != null){
+            Player p = e.getPlayer();
+            ArmorEquipEvent armorEquipEvent = new ArmorEquipEvent(p, ArmorEquipEvent.EquipMethod.BROKE, type, e.getBrokenItem(), null);
+            Bukkit.getServer().getPluginManager().callEvent(armorEquipEvent);
+            if(armorEquipEvent.isCancelled()){
+                ItemStack i = e.getBrokenItem().clone();
+                i.setAmount(1);
+                i.setDurability((short) (i.getDurability() - 1));
+                if(type.equals(ArmorType.HELMET)){
+                    p.getInventory().setHelmet(i);
+                }else if(type.equals(ArmorType.CHESTPLATE)){
+                    p.getInventory().setChestplate(i);
+                }else if(type.equals(ArmorType.LEGGINGS)){
+                    p.getInventory().setLeggings(i);
+                }else if(type.equals(ArmorType.BOOTS)){
+                    p.getInventory().setBoots(i);
+                }
+            }
+        }
+    }
+
+    @EventHandler
+    public void playerDeathEvent(PlayerDeathEvent e){
+        Player p = e.getEntity();
+        if(e.getKeepInventory()) return;
+        for(ItemStack i : p.getInventory().getArmorContents()){
+            if(!isAirOrNull(i)){
+                Bukkit.getServer().getPluginManager().callEvent(new ArmorEquipEvent(p, ArmorEquipEvent.EquipMethod.DEATH, ArmorType.matchType(i), i, null));
+                // No way to cancel a death event.
+            }
+        }
+    }
+
+    /**
+     * A utility method to support versions that use null or air ItemStacks.
+     */
+    public static boolean isAirOrNull(ItemStack item){
+        return item == null || item.getType().equals(Material.AIR);
+    }
+}
diff --git a/src/main/java/org/ospaindustries/event/ArmorType.java b/src/main/java/org/ospaindustries/event/ArmorType.java
new file mode 100644
index 0000000000000000000000000000000000000000..505da302ba2c2b83185491a497b910b7203d17e0
--- /dev/null
+++ b/src/main/java/org/ospaindustries/event/ArmorType.java
@@ -0,0 +1,34 @@
+package org.ospaindustries.event;
+
+import org.bukkit.inventory.ItemStack;
+
+public enum ArmorType {
+
+    HELMET(5), CHESTPLATE(6), LEGGINGS(7), BOOTS(8);
+
+    private final int slot;
+
+    ArmorType(int slot){
+        this.slot = slot;
+    }
+
+    /**
+     * Attempts to match the ArmorType for the specified ItemStack.
+     *
+     * @param itemStack The ItemStack to parse the type of.
+     * @return The parsed ArmorType, or null if not found.
+     */
+    public static ArmorType matchType(final ItemStack itemStack){
+        if(ArmorListener.isAirOrNull(itemStack)) return null;
+        String type = itemStack.getType().name();
+        if(type.endsWith("_HELMET") || type.endsWith("_SKULL") || type.endsWith("_HEAD")) return HELMET;
+        else if(type.endsWith("_CHESTPLATE") || type.equals("ELYTRA")) return CHESTPLATE;
+        else if(type.endsWith("_LEGGINGS")) return LEGGINGS;
+        else if(type.endsWith("_BOOTS")) return BOOTS;
+        else return null;
+    }
+
+    public int getSlot(){
+        return slot;
+    }
+}
diff --git a/src/main/java/org/ospaindustries/event/DispenserArmorListener.java b/src/main/java/org/ospaindustries/event/DispenserArmorListener.java
new file mode 100644
index 0000000000000000000000000000000000000000..ed1eeed6e6cba3d3c829c032dff03f46e1062dfe
--- /dev/null
+++ b/src/main/java/org/ospaindustries/event/DispenserArmorListener.java
@@ -0,0 +1,24 @@
+package org.ospaindustries.event;
+
+import org.bukkit.Bukkit;
+import org.bukkit.entity.Player;
+import org.bukkit.event.EventHandler;
+import org.bukkit.event.Listener;
+import org.bukkit.event.block.BlockDispenseArmorEvent;
+
+public class DispenserArmorListener implements Listener {
+    @EventHandler
+    public void dispenseArmorEvent(BlockDispenseArmorEvent event){
+        ArmorType type = ArmorType.matchType(event.getItem());
+        if(type != null){
+            if(event.getTargetEntity() instanceof Player){
+                Player p = (Player) event.getTargetEntity();
+                ArmorEquipEvent armorEquipEvent = new ArmorEquipEvent(p, ArmorEquipEvent.EquipMethod.DISPENSER, type, null, event.getItem());
+                Bukkit.getServer().getPluginManager().callEvent(armorEquipEvent);
+                if(armorEquipEvent.isCancelled()){
+                    event.setCancelled(true);
+                }
+            }
+        }
+    }
+}
