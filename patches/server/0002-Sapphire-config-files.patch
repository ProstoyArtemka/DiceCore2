From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: DenaryDev <denaryplanet@gmail.com>
Date: Fri, 3 Dec 2021 19:45:00 +0500
Subject: [PATCH] Sapphire config files


diff --git a/src/main/java/co/aikar/timings/TimingsExport.java b/src/main/java/co/aikar/timings/TimingsExport.java
index 2cc44fbf8e5bd436b6d4e19f6c06b351e750cb31..176ce96bf720fab9e714661ff5671906e01e6b57 100644
--- a/src/main/java/co/aikar/timings/TimingsExport.java
+++ b/src/main/java/co/aikar/timings/TimingsExport.java
@@ -242,7 +242,8 @@ public class TimingsExport extends Thread {
             pair("spigot", mapAsJSON(Bukkit.spigot().getSpigotConfig(), null)),
             pair("bukkit", mapAsJSON(Bukkit.spigot().getBukkitConfig(), null)),
             pair("paper", mapAsJSON(Bukkit.spigot().getPaperConfig(), null)), // Pufferfish
-            pair("pufferfish", mapAsJSON(gg.pufferfish.pufferfish.PufferfishConfig.getConfigCopy(), null)) // Pufferfish
+            pair("pufferfish", mapAsJSON(gg.pufferfish.pufferfish.PufferfishConfig.getConfigCopy(), null)), // Pufferfish
+            pair("sapphire", mapAsJSON(Bukkit.spigot().getSapphireConfig(), null)) // Sapphire
         ));
 
         new TimingsExport(listeners, parent, history).start();
diff --git a/src/main/java/io/sapphiremc/sapphire/SapphireConfig.java b/src/main/java/io/sapphiremc/sapphire/SapphireConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..1e10cd5eb8c8274b8355b57703f0b7f19eb6167d
--- /dev/null
+++ b/src/main/java/io/sapphiremc/sapphire/SapphireConfig.java
@@ -0,0 +1,186 @@
+package io.sapphiremc.sapphire;
+
+import com.google.common.base.Throwables;
+import java.util.List;
+import org.bukkit.Bukkit;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.purpurmc.purpur.PurpurConfig;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.concurrent.TimeUnit;
+import java.util.logging.Level;
+import java.util.regex.Pattern;
+
+@SuppressWarnings({"unused", "deprecation"})
+public class SapphireConfig {
+
+    public static File CONFIG_FILE;
+	private static final String HEADER = """
+        This is the main configuration file for Sapphire.
+        Sapphire contains many breaking changes and settings, so know what you are doing!
+        You have been warned!
+        """;
+
+    /*========================================================================*/
+    public static YamlConfiguration config;
+    public static int version; // since we're remapping sidestreams' configs we need this public
+    public static boolean verbose; // since we're remapping sidestreams' configs we need this public
+    /*========================================================================*/
+
+    public static void init(File configFile) {
+        CONFIG_FILE = configFile;
+        config = new YamlConfiguration();
+        try {
+            config.load(CONFIG_FILE);
+        } catch (IOException ignored) {
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load sapphire.yml, please correct your syntax errors", ex);
+            throw Throwables.propagate(ex);
+        }
+        config.options().header(HEADER);
+        config.options().copyDefaults(true);
+        verbose = getBoolean("verbose", false);
+
+        version = getInt("config-version", 2);
+        updateConfig();
+        set("config-version", 2);
+        readConfig(SapphireConfig.class, null);
+    }
+
+    private static void updateConfig() {
+        if (version == 1) {
+            String s = config.getString("general.server-mod-name");
+            if (s != null) {
+                Bukkit.getLogger().warning("The general.server-mod-name setting in sapphire.yml will be removed as purpur.yml already contains such a setting. The value will be moved to purpur.yml");
+                PurpurConfig.setServerModName(s);
+                set("general.server-mod-name", null);
+            }
+        }
+    }
+
+    protected static void log(String s) {
+        if (verbose) {
+            log(Level.INFO, s);
+        }
+    }
+
+    protected static void log(Level level, String s) {
+        Bukkit.getLogger().log(level, s);
+    }
+
+    static void readConfig(Class<?> clazz, Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(instance);
+                    } catch (InvocationTargetException ex) {
+                        throw Throwables.propagate(ex.getCause());
+                    } catch (Exception ex) {
+                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+                    }
+                }
+            }
+        }
+
+        try {
+            config.save(CONFIG_FILE);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+        }
+    }
+
+    private static final Pattern SPACE = Pattern.compile(" ");
+    private static final Pattern NOT_NUMERIC = Pattern.compile("[^-\\d.]");
+
+    public static int getSeconds(String str) {
+        str = SPACE.matcher(str).replaceAll("");
+        final char unit = str.charAt(str.length() - 1);
+        str = NOT_NUMERIC.matcher(str).replaceAll("");
+        double num;
+        try {
+            num = Double.parseDouble(str);
+        } catch (Exception e) {
+            num = 0D;
+        }
+        switch (unit) {
+            case 'd':
+                num *= (double) 60 * 60 * 24;
+                break;
+            case 'h':
+                num *= (double) 60 * 60;
+                break;
+            case 'm':
+                num *= 60;
+                break;
+            default:
+            case 's':
+                break;
+        }
+        return (int) num;
+    }
+
+    protected static String timeSummary(int seconds) {
+        String time = "";
+
+        if (seconds > 60 * 60 * 24) {
+            time = TimeUnit.SECONDS.toDays(seconds) + "d";
+            seconds %= 60 * 60 * 24;
+        }
+
+        if (seconds > 60 * 60) {
+            time = TimeUnit.SECONDS.toHours(seconds) + "h";
+            seconds %= 60 * 60;
+        }
+
+        if (seconds > 0) {
+            time = TimeUnit.SECONDS.toMinutes(seconds) + "m";
+        }
+        return time;
+    }
+
+    private static void set(String path, Object val) {
+        config.set(path, val);
+    }
+
+    private static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    private static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+    }
+
+    private static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+
+    private static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+
+    private static <T> List<?> getList(String path, T def) {
+        config.addDefault(path, def);
+        return config.getList(path, config.getList(path));
+    }
+
+    public static boolean debug = false;
+    private static void general() {
+        debug = getBoolean("general.debug", debug);
+    }
+
+    public static boolean disableEntityStuckChecks = false;
+    private static void settings() {
+        disableEntityStuckChecks = getBoolean("settings.disable-entity-stuck-checks", false);
+    }
+}
diff --git a/src/main/java/io/sapphiremc/sapphire/SapphireWorldConfig.java b/src/main/java/io/sapphiremc/sapphire/SapphireWorldConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..226a5e361f382585f4dcc5e901d2a1bd0768e9fc
--- /dev/null
+++ b/src/main/java/io/sapphiremc/sapphire/SapphireWorldConfig.java
@@ -0,0 +1,64 @@
+/*
+ * Copyright (c) 2022 DenaryDev
+ *
+ * Use of this source code is governed by an MIT-style
+ * license that can be found in the LICENSE file or at
+ * https://opensource.org/licenses/MIT.
+ */
+package io.sapphiremc.sapphire;
+
+import java.util.List;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+import static io.sapphiremc.sapphire.SapphireConfig.log;
+
+@SuppressWarnings({"unused"})
+public class SapphireWorldConfig {
+
+    private final String worldName;
+    private YamlConfiguration config;
+
+    public SapphireWorldConfig(String worldName) {
+        this.worldName = worldName;
+        this.config = SapphireConfig.config;
+        init();
+    }
+
+    public void init() {
+        this.config = SapphireConfig.config; // grab updated reference
+        log("-------- World Settings For [" + worldName + "] --------");
+        SapphireConfig.readConfig(SapphireWorldConfig.class, this);
+    }
+
+    private void set(String path, Object val) {
+        config.set("world-settings.default." + path, val);
+        if (config.get("world-settings." + worldName + "." + path) != null) {
+            config.set("world-settings." + worldName + "." + path, val);
+        }
+    }
+
+    private String getString(String path, String def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getString("world-settings." + worldName + "." + path, config.getString("world-settings.default." + path));
+    }
+
+    private boolean getBoolean(String path, boolean def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getBoolean("world-settings." + worldName + "." + path, config.getBoolean("world-settings.default." + path));
+    }
+
+    private double getDouble(String path, double def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getDouble("world-settings." + worldName + "." + path, config.getDouble("world-settings.default." + path));
+    }
+
+    private int getInt(String path, int def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getInt("world-settings." + worldName + "." + path, config.getInt("world-settings.default." + path, def));
+    }
+
+    private <T> List<?> getList(String path, List<T> def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getList("world-settings." + worldName + "." + path, config.getList("world-settings.default." + path));
+    }
+}
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 46858fb57f122033a68aeb4ad3943132a677fb46..de07744a513236a6e3b7ee3275349b9a4cdc9633 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -233,6 +233,14 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         gg.pufferfish.pufferfish.PufferfishConfig.pufferfishFile = (java.io.File) options.valueOf("pufferfish-settings"); // Purpur
         gg.pufferfish.pufferfish.PufferfishConfig.load(); // Pufferfish
         gg.pufferfish.pufferfish.PufferfishCommand.init(); // Pufferfish
+        // Sapphire start
+        try {
+            io.sapphiremc.sapphire.SapphireConfig.init((java.io.File) options.valueOf("sapphire-settings"));
+        } catch (Exception e) {
+            DedicatedServer.LOGGER.error("Unable to load sapphire configuration", e);
+            return false;
+        }
+        // Sapphire end
 
         this.setPvpAllowed(dedicatedserverproperties.pvp);
         this.setFlightAllowed(dedicatedserverproperties.allowFlight);
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 454cd09309f581b43a521fcb8fd184b7788c6a88..89fd3a0355b44e21721078cfc8f762459a1555d2 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -407,6 +407,7 @@ public abstract class LivingEntity extends Entity {
             boolean flag = this instanceof net.minecraft.world.entity.player.Player;
 
             if (!this.level.isClientSide) {
+                if (!io.sapphiremc.sapphire.SapphireConfig.disableEntityStuckChecks) // Sapphire
                 if ((!gg.pufferfish.pufferfish.PufferfishConfig.enableSuffocationOptimization || (tickCount % 10 == 0 && couldPossiblyBeHurt(1.0F))) && this.isInWall()) { // Pufferfish - optimize suffocation
                     this.hurt(DamageSource.IN_WALL, 1.0F);
                 } else if (flag && !this.level.getWorldBorder().isWithinBounds(this.getBoundingBox())) {
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index a9289072b048095330ea32d7c965e8dda61a36fc..c1816582fbcecdafddd51b3bb50e7530c2127492 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -171,6 +171,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         return this.paperConfig;
     }
     // Paper end
+    public final io.sapphiremc.sapphire.SapphireWorldConfig sapphireConfig; // Sapphire
 
     public final com.destroystokyo.paper.antixray.ChunkPacketBlockController chunkPacketBlockController; // Paper - Anti-Xray
     public final org.purpurmc.purpur.PurpurWorldConfig purpurConfig; // Purpur
@@ -331,6 +332,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         this.paperConfig = paperWorldConfigCreator.apply(this.spigotConfig); // Paper
         this.purpurConfig = new org.purpurmc.purpur.PurpurWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName(), env); // Purpur
         this.playerBreedingCooldowns = this.getNewBreedingCooldownCache(); // Purpur
+        this.sapphireConfig = new io.sapphiremc.sapphire.SapphireWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName()); // Sapphire
         this.generator = gen;
         this.world = new CraftWorld((ServerLevel) this, gen, biomeProvider, env);
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 4bfc58592a8e9c95075d9d73b2c15fb0dfadfba0..c7509c78c241755ac5e8a7c2dab17addcd4adab3 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1026,6 +1026,7 @@ public final class CraftServer implements Server {
         org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
         this.console.paperConfigurations.reloadConfigs(this.console);
         org.purpurmc.purpur.PurpurConfig.init((File) console.options.valueOf("purpur-settings")); // Purpur
+        io.sapphiremc.sapphire.SapphireConfig.init((File) console.options.valueOf("sapphire-settings")); // Sapphire
         for (ServerLevel world : this.console.getAllLevels()) {
             // world.serverLevelData.setDifficulty(config.difficulty); // Paper - per level difficulty
             world.setSpawnSettings(world.serverLevelData.getDifficulty() != Difficulty.PEACEFUL && config.spawnMonsters, config.spawnAnimals); // Paper - per level difficulty (from MinecraftServer#setDifficulty(ServerLevel, Difficulty, boolean))
@@ -1042,6 +1043,7 @@ public final class CraftServer implements Server {
             }
             world.spigotConfig.init(); // Spigot
             world.purpurConfig.init(); // Purpur
+            world.sapphireConfig.init(); // Sapphire
         }
 
         Plugin[] pluginClone = pluginManager.getPlugins().clone(); // Paper
@@ -2879,6 +2881,13 @@ public final class CraftServer implements Server {
         }
         // Purpur end
 
+        // Sapphire start
+        @Override
+        public YamlConfiguration getSapphireConfig() {
+            return io.sapphiremc.sapphire.SapphireConfig.config;
+        }
+        // Sapphire end
+
         @Override
         public void restart() {
             org.spigotmc.RestartCommand.restart();
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 52d0216938b0ef68d82bc91dbdcee37755a1a0cd..7bd1ea4d8d5e990c0b8aa0a15aa0979a2c8bdcfb 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -159,6 +159,14 @@ public class Main {
                         .defaultsTo(new File("paper.yml"))
                         .describedAs("Yml file");
 
+                // Sapphire start
+                acceptsAll(asList("sapphire", "sapphire-settings"), "File for sapphire settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("sapphire.yml"))
+                        .describedAs("Yml file");
+                // Sapphire end
+
                 acceptsAll(asList("add-plugin", "add-extra-plugin-jar"), "Specify paths to extra plugin jars to be loaded in addition to those in the plugins folder. This argument can be specified multiple times, once for each extra plugin jar path.")
                         .withRequiredArg()
                         .ofType(File.class)
diff --git a/src/main/java/org/purpurmc/purpur/PurpurConfig.java b/src/main/java/org/purpurmc/purpur/PurpurConfig.java
index 76cbfb7e900bf2698776f54cfe498f4b42965221..247ae19a85bf8126c1b450b5c5d2fec768e91a48 100644
--- a/src/main/java/org/purpurmc/purpur/PurpurConfig.java
+++ b/src/main/java/org/purpurmc/purpur/PurpurConfig.java
@@ -244,6 +244,19 @@ public class PurpurConfig {
         if (!TimingsManager.hiddenConfigs.contains("settings.seed")) TimingsManager.hiddenConfigs.add("settings.seed");
     }
 
+    // Sapphire start - move server mod name from sapphire.yml to purpur.yml
+    public static void setServerModName(String s) {
+        if (serverModName.equals("Purpur")) {
+            set("settings.server-mod-name", s);
+            try {
+                config.save(CONFIG_FILE);
+            } catch (IOException ex) {
+                Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+            }
+        }
+    }
+    // Sapphire end
+
     public static String serverModName = "Purpur";
     private static void serverModName() {
         serverModName = getString("settings.server-mod-name", serverModName);
