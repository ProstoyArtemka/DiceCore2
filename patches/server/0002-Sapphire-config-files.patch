From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: DenaryDev <denaryplanet@gmail.com>
Date: Fri, 3 Dec 2021 19:45:00 +0500
Subject: [PATCH] Sapphire config files


diff --git a/src/main/java/io/sapphiremc/sapphire/SapphireConfig.java b/src/main/java/io/sapphiremc/sapphire/SapphireConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..7b482c1275ae9bcd028d4ffa8367daae02a170c3
--- /dev/null
+++ b/src/main/java/io/sapphiremc/sapphire/SapphireConfig.java
@@ -0,0 +1,133 @@
+package io.sapphiremc.sapphire;
+
+import com.google.common.base.Throwables;
+import java.util.List;
+import org.bukkit.Bukkit;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.logging.Level;
+
+@SuppressWarnings("unused")
+public class SapphireConfig {
+
+    public static File CONFIG_FILE;
+	private static final String HEADER = """
+        This is the main configuration file for Sapphire.
+        Sapphire contains many breaking changes and settings, so know what you are doing!
+        You have been warned!
+        """;
+
+    /*========================================================================*/
+    public static YamlConfiguration config;
+    public static int version; // since we're remapping sidestreams' configs we need this public
+    public static boolean verbose; // since we're remapping sidestreams' configs we need this public
+    /*========================================================================*/
+
+    public static void init(File configFile) {
+        CONFIG_FILE = configFile;
+        config = new YamlConfiguration();
+        try {
+            config.load(CONFIG_FILE);
+        } catch (IOException ignored) {
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load sapphire.yml, please correct your syntax errors", ex);
+            throw Throwables.propagate(ex);
+        }
+        config.options().header(HEADER);
+        config.options().copyDefaults(true);
+        verbose = getBoolean("verbose", false);
+
+        version = getInt("config-version", 2);
+        updateConfig();
+        set("config-version", 2);
+        readConfig(SapphireConfig.class, null);
+    }
+
+    private static void updateConfig() {
+        if (version == 1) {
+            String s = config.getString("general.server-mod-name");
+            if (s != null) {
+                Bukkit.getLogger().warning("The general.server-mod-name setting in sapphire.yml will be removed because purpur.yml already contains this setting.");
+                set("general.server-mod-name", null);
+            }
+        }
+    }
+
+    protected static void log(String s) {
+        if (verbose) {
+            log(Level.INFO, s);
+        }
+    }
+
+    protected static void log(Level level, String s) {
+        Bukkit.getLogger().log(level, s);
+    }
+
+    static void readConfig(Class<?> clazz, Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(instance);
+                    } catch (InvocationTargetException ex) {
+                        throw Throwables.propagate(ex.getCause());
+                    } catch (Exception ex) {
+                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+                    }
+                }
+            }
+        }
+
+        try {
+            config.save(CONFIG_FILE);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+        }
+    }
+
+    private static void set(String path, Object val) {
+        config.set(path, val);
+    }
+
+    private static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    private static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+    }
+
+    private static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+
+    private static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+
+    private static <T> List<?> getList(String path, T def) {
+        config.addDefault(path, def);
+        return config.getList(path, config.getList(path));
+    }
+
+    public static boolean debug = false;
+    private static void general() {
+        debug = getBoolean("general.debug", debug);
+    }
+
+    public static boolean disableEntityStuckChecks = false;
+    private static void settings() {
+        disableEntityStuckChecks = getBoolean("settings.disable-entity-stuck-checks", false);
+    }
+}
diff --git a/src/main/java/io/sapphiremc/sapphire/SapphireWorldConfig.java b/src/main/java/io/sapphiremc/sapphire/SapphireWorldConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..226a5e361f382585f4dcc5e901d2a1bd0768e9fc
--- /dev/null
+++ b/src/main/java/io/sapphiremc/sapphire/SapphireWorldConfig.java
@@ -0,0 +1,64 @@
+/*
+ * Copyright (c) 2022 DenaryDev
+ *
+ * Use of this source code is governed by an MIT-style
+ * license that can be found in the LICENSE file or at
+ * https://opensource.org/licenses/MIT.
+ */
+package io.sapphiremc.sapphire;
+
+import java.util.List;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+import static io.sapphiremc.sapphire.SapphireConfig.log;
+
+@SuppressWarnings({"unused"})
+public class SapphireWorldConfig {
+
+    private final String worldName;
+    private YamlConfiguration config;
+
+    public SapphireWorldConfig(String worldName) {
+        this.worldName = worldName;
+        this.config = SapphireConfig.config;
+        init();
+    }
+
+    public void init() {
+        this.config = SapphireConfig.config; // grab updated reference
+        log("-------- World Settings For [" + worldName + "] --------");
+        SapphireConfig.readConfig(SapphireWorldConfig.class, this);
+    }
+
+    private void set(String path, Object val) {
+        config.set("world-settings.default." + path, val);
+        if (config.get("world-settings." + worldName + "." + path) != null) {
+            config.set("world-settings." + worldName + "." + path, val);
+        }
+    }
+
+    private String getString(String path, String def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getString("world-settings." + worldName + "." + path, config.getString("world-settings.default." + path));
+    }
+
+    private boolean getBoolean(String path, boolean def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getBoolean("world-settings." + worldName + "." + path, config.getBoolean("world-settings.default." + path));
+    }
+
+    private double getDouble(String path, double def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getDouble("world-settings." + worldName + "." + path, config.getDouble("world-settings.default." + path));
+    }
+
+    private int getInt(String path, int def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getInt("world-settings." + worldName + "." + path, config.getInt("world-settings.default." + path, def));
+    }
+
+    private <T> List<?> getList(String path, List<T> def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getList("world-settings." + worldName + "." + path, config.getList("world-settings.default." + path));
+    }
+}
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 12124d6fbc0406bb62bd95a0f7bab68afa43377c..1f8be86c962ffdb42a54430f6c85c9fce1758b17 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -228,6 +228,14 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         }
         org.purpurmc.purpur.PurpurConfig.registerCommands();
         // Purpur end
+        // Sapphire start
+        try {
+            io.sapphiremc.sapphire.SapphireConfig.init((java.io.File) options.valueOf("sapphire-settings"));
+        } catch (Exception e) {
+            DedicatedServer.LOGGER.error("Unable to load server configuration", e);
+            return false;
+        }
+        // Sapphire end
         com.destroystokyo.paper.VersionHistoryManager.INSTANCE.getClass(); // load version history now
         io.papermc.paper.brigadier.PaperBrigadierProviderImpl.INSTANCE.getClass(); // init PaperBrigadierProvider
         // Paper end
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 0bd2d45e336a26b3831f16590b419ddb22f7fa57..e66d5625285f4fe34b026ec418181dc723eb0b09 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -420,6 +420,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
             boolean flag = this instanceof net.minecraft.world.entity.player.Player;
 
             if (!this.level().isClientSide) {
+                if (!io.sapphiremc.sapphire.SapphireConfig.disableEntityStuckChecks) // Sapphire
                 if ((!gg.pufferfish.pufferfish.PufferfishConfig.enableSuffocationOptimization || (tickCount % 10 == 0 && couldPossiblyBeHurt(1.0F))) && this.isInWall()) { // Pufferfish - optimize suffocation
                     this.hurt(this.damageSources().inWall(), 1.0F);
                 } else if (flag && !this.level().getWorldBorder().isWithinBounds(this.getBoundingBox())) {
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index fdd55ac3720d44e3d246e05fe9a07b5f73bed0e8..db239f3818e2f5e53c1e7403ca07d9456e729455 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -177,6 +177,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
 
     public final com.destroystokyo.paper.antixray.ChunkPacketBlockController chunkPacketBlockController; // Paper - Anti-Xray
     public final org.purpurmc.purpur.PurpurWorldConfig purpurConfig; // Purpur
+    public final io.sapphiremc.sapphire.SapphireWorldConfig sapphireConfig; // Sapphire
     public final co.aikar.timings.WorldTimingsHandler timings; // Paper
     public static BlockPos lastPhysicsProblem; // Spigot
     private org.spigotmc.TickLimiter entityLimiter;
@@ -333,6 +334,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         this.paperConfig = paperWorldConfigCreator.apply(this.spigotConfig); // Paper
         this.purpurConfig = new org.purpurmc.purpur.PurpurWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName(), env); // Purpur
         this.playerBreedingCooldowns = this.getNewBreedingCooldownCache(); // Purpur
+        this.sapphireConfig = new io.sapphiremc.sapphire.SapphireWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName()); // Sapphire
         this.generator = gen;
         this.world = new CraftWorld((ServerLevel) this, gen, biomeProvider, env);
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index b771cac7ff63a4352a04b138a673e7a9cf1b65aa..be528f57e9864bca2a2eec8eb72244c6c724f6e6 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1068,6 +1068,7 @@ public final class CraftServer implements Server {
         org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
         this.console.paperConfigurations.reloadConfigs(this.console);
         org.purpurmc.purpur.PurpurConfig.init((File) console.options.valueOf("purpur-settings")); // Purpur
+        io.sapphiremc.sapphire.SapphireConfig.init((File) console.options.valueOf("sapphire-settings")); // Sapphire
         for (ServerLevel world : this.console.getAllLevels()) {
             // world.serverLevelData.setDifficulty(config.difficulty); // Paper - per level difficulty
             world.setSpawnSettings(world.serverLevelData.getDifficulty() != Difficulty.PEACEFUL && config.spawnMonsters, config.spawnAnimals); // Paper - per level difficulty (from MinecraftServer#setDifficulty(ServerLevel, Difficulty, boolean))
@@ -1084,6 +1085,7 @@ public final class CraftServer implements Server {
             }
             world.spigotConfig.init(); // Spigot
             world.purpurConfig.init(); // Purpur
+            world.sapphireConfig.init(); // Sapphire
         }
 
         Plugin[] pluginClone = pluginManager.getPlugins().clone(); // Paper
@@ -2934,6 +2936,13 @@ public final class CraftServer implements Server {
         }
         // Purpur end
 
+        // Sapphire start
+        @Override
+        public YamlConfiguration getSapphireConfig() {
+            return io.sapphiremc.sapphire.SapphireConfig.config;
+        }
+        // Sapphire end
+
         @Override
         public void restart() {
             org.spigotmc.RestartCommand.restart();
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 7c040ef1370a556e090e7f7859d9da6e70270b8d..e495401981abc4137e78652c6faf224a8b77457b 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -187,6 +187,14 @@ public class Main {
                         .describedAs("Yml file");
                 // Purpur end
 
+                // Sapphire start
+                acceptsAll(asList("sapphire", "sapphire-settings"), "File for sapphire settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("sapphire.yml"))
+                        .describedAs("Yml file");
+                // Sapphire end
+
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
                         .withRequiredArg()
