From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: DenaryDev <denaryplanet@gmail.com>
Date: Fri, 3 Dec 2021 19:45:00 +0500
Subject: [PATCH] Sapphire config files


diff --git a/src/main/java/co/aikar/timings/TimingsExport.java b/src/main/java/co/aikar/timings/TimingsExport.java
index fa8eb9fb4122097d2a5cb1d07f75c830ad6b2f57..fe104c36773f8e8f095a6c075919f0ba8c5e2fc5 100644
--- a/src/main/java/co/aikar/timings/TimingsExport.java
+++ b/src/main/java/co/aikar/timings/TimingsExport.java
@@ -245,8 +245,9 @@ public class TimingsExport extends Thread {
             pair("spigot", mapAsJSON(Bukkit.spigot().getSpigotConfig(), null)),
             pair("paper", mapAsJSON(Bukkit.spigot().getPaperConfig(), null)),
             pair("pufferfish", mapAsJSON(gg.pufferfish.pufferfish.PufferfishConfig.getConfigCopy(), null)), // Pufferfish
-            pair("purpur", mapAsJSON(Bukkit.spigot().getPurpurConfig(), null))
+            pair("purpur", mapAsJSON(Bukkit.spigot().getPurpurConfig(), null)),
             // Purpur end
+            pair("sapphire", mapAsJSON(Bukkit.spigot().getSapphireConfig(), null)) // Sapphire
         ));
 
         new TimingsExport(listeners, parent, history).start();
diff --git a/src/main/java/io/sapphiremc/sapphire/SapphireConfig.java b/src/main/java/io/sapphiremc/sapphire/SapphireConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..1e10cd5eb8c8274b8355b57703f0b7f19eb6167d
--- /dev/null
+++ b/src/main/java/io/sapphiremc/sapphire/SapphireConfig.java
@@ -0,0 +1,186 @@
+package io.sapphiremc.sapphire;
+
+import com.google.common.base.Throwables;
+import java.util.List;
+import org.bukkit.Bukkit;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.purpurmc.purpur.PurpurConfig;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.concurrent.TimeUnit;
+import java.util.logging.Level;
+import java.util.regex.Pattern;
+
+@SuppressWarnings({"unused", "deprecation"})
+public class SapphireConfig {
+
+    public static File CONFIG_FILE;
+	private static final String HEADER = """
+        This is the main configuration file for Sapphire.
+        Sapphire contains many breaking changes and settings, so know what you are doing!
+        You have been warned!
+        """;
+
+    /*========================================================================*/
+    public static YamlConfiguration config;
+    public static int version; // since we're remapping sidestreams' configs we need this public
+    public static boolean verbose; // since we're remapping sidestreams' configs we need this public
+    /*========================================================================*/
+
+    public static void init(File configFile) {
+        CONFIG_FILE = configFile;
+        config = new YamlConfiguration();
+        try {
+            config.load(CONFIG_FILE);
+        } catch (IOException ignored) {
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load sapphire.yml, please correct your syntax errors", ex);
+            throw Throwables.propagate(ex);
+        }
+        config.options().header(HEADER);
+        config.options().copyDefaults(true);
+        verbose = getBoolean("verbose", false);
+
+        version = getInt("config-version", 2);
+        updateConfig();
+        set("config-version", 2);
+        readConfig(SapphireConfig.class, null);
+    }
+
+    private static void updateConfig() {
+        if (version == 1) {
+            String s = config.getString("general.server-mod-name");
+            if (s != null) {
+                Bukkit.getLogger().warning("The general.server-mod-name setting in sapphire.yml will be removed as purpur.yml already contains such a setting. The value will be moved to purpur.yml");
+                PurpurConfig.setServerModName(s);
+                set("general.server-mod-name", null);
+            }
+        }
+    }
+
+    protected static void log(String s) {
+        if (verbose) {
+            log(Level.INFO, s);
+        }
+    }
+
+    protected static void log(Level level, String s) {
+        Bukkit.getLogger().log(level, s);
+    }
+
+    static void readConfig(Class<?> clazz, Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(instance);
+                    } catch (InvocationTargetException ex) {
+                        throw Throwables.propagate(ex.getCause());
+                    } catch (Exception ex) {
+                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+                    }
+                }
+            }
+        }
+
+        try {
+            config.save(CONFIG_FILE);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+        }
+    }
+
+    private static final Pattern SPACE = Pattern.compile(" ");
+    private static final Pattern NOT_NUMERIC = Pattern.compile("[^-\\d.]");
+
+    public static int getSeconds(String str) {
+        str = SPACE.matcher(str).replaceAll("");
+        final char unit = str.charAt(str.length() - 1);
+        str = NOT_NUMERIC.matcher(str).replaceAll("");
+        double num;
+        try {
+            num = Double.parseDouble(str);
+        } catch (Exception e) {
+            num = 0D;
+        }
+        switch (unit) {
+            case 'd':
+                num *= (double) 60 * 60 * 24;
+                break;
+            case 'h':
+                num *= (double) 60 * 60;
+                break;
+            case 'm':
+                num *= 60;
+                break;
+            default:
+            case 's':
+                break;
+        }
+        return (int) num;
+    }
+
+    protected static String timeSummary(int seconds) {
+        String time = "";
+
+        if (seconds > 60 * 60 * 24) {
+            time = TimeUnit.SECONDS.toDays(seconds) + "d";
+            seconds %= 60 * 60 * 24;
+        }
+
+        if (seconds > 60 * 60) {
+            time = TimeUnit.SECONDS.toHours(seconds) + "h";
+            seconds %= 60 * 60;
+        }
+
+        if (seconds > 0) {
+            time = TimeUnit.SECONDS.toMinutes(seconds) + "m";
+        }
+        return time;
+    }
+
+    private static void set(String path, Object val) {
+        config.set(path, val);
+    }
+
+    private static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    private static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+    }
+
+    private static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+
+    private static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+
+    private static <T> List<?> getList(String path, T def) {
+        config.addDefault(path, def);
+        return config.getList(path, config.getList(path));
+    }
+
+    public static boolean debug = false;
+    private static void general() {
+        debug = getBoolean("general.debug", debug);
+    }
+
+    public static boolean disableEntityStuckChecks = false;
+    private static void settings() {
+        disableEntityStuckChecks = getBoolean("settings.disable-entity-stuck-checks", false);
+    }
+}
diff --git a/src/main/java/io/sapphiremc/sapphire/SapphireWorldConfig.java b/src/main/java/io/sapphiremc/sapphire/SapphireWorldConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..226a5e361f382585f4dcc5e901d2a1bd0768e9fc
--- /dev/null
+++ b/src/main/java/io/sapphiremc/sapphire/SapphireWorldConfig.java
@@ -0,0 +1,64 @@
+/*
+ * Copyright (c) 2022 DenaryDev
+ *
+ * Use of this source code is governed by an MIT-style
+ * license that can be found in the LICENSE file or at
+ * https://opensource.org/licenses/MIT.
+ */
+package io.sapphiremc.sapphire;
+
+import java.util.List;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+import static io.sapphiremc.sapphire.SapphireConfig.log;
+
+@SuppressWarnings({"unused"})
+public class SapphireWorldConfig {
+
+    private final String worldName;
+    private YamlConfiguration config;
+
+    public SapphireWorldConfig(String worldName) {
+        this.worldName = worldName;
+        this.config = SapphireConfig.config;
+        init();
+    }
+
+    public void init() {
+        this.config = SapphireConfig.config; // grab updated reference
+        log("-------- World Settings For [" + worldName + "] --------");
+        SapphireConfig.readConfig(SapphireWorldConfig.class, this);
+    }
+
+    private void set(String path, Object val) {
+        config.set("world-settings.default." + path, val);
+        if (config.get("world-settings." + worldName + "." + path) != null) {
+            config.set("world-settings." + worldName + "." + path, val);
+        }
+    }
+
+    private String getString(String path, String def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getString("world-settings." + worldName + "." + path, config.getString("world-settings.default." + path));
+    }
+
+    private boolean getBoolean(String path, boolean def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getBoolean("world-settings." + worldName + "." + path, config.getBoolean("world-settings.default." + path));
+    }
+
+    private double getDouble(String path, double def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getDouble("world-settings." + worldName + "." + path, config.getDouble("world-settings.default." + path));
+    }
+
+    private int getInt(String path, int def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getInt("world-settings." + worldName + "." + path, config.getInt("world-settings.default." + path, def));
+    }
+
+    private <T> List<?> getList(String path, List<T> def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getList("world-settings." + worldName + "." + path, config.getList("world-settings.default." + path));
+    }
+}
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 0bfdc4247a651f6c1caf7a95114be68bc7d77d7b..28ee5e3645bddb4e850d098e50f8195fa15918ea 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -237,6 +237,14 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         // Paper end
         gg.pufferfish.pufferfish.PufferfishConfig.load(); // Pufferfish
         gg.pufferfish.pufferfish.PufferfishCommand.init(); // Pufferfish
+        // Sapphire start
+        try {
+            io.sapphiremc.sapphire.SapphireConfig.init((java.io.File) options.valueOf("sapphire-settings"));
+        } catch (Exception e) {
+            DedicatedServer.LOGGER.error("Unable to load sapphire configuration", e);
+            return false;
+        }
+        // Sapphire end
 
         this.setPvpAllowed(dedicatedserverproperties.pvp);
         this.setFlightAllowed(dedicatedserverproperties.allowFlight);
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index cd414a9275e6d9f8c704854763b18f4ee43b67b7..6e4aeba81404021da575b01645215f239472edc2 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -404,6 +404,8 @@ public abstract class LivingEntity extends Entity {
 
         if (this.isAlive()) {
             boolean flag = this instanceof net.minecraft.world.entity.player.Player;
+
+            if (!io.sapphiremc.sapphire.SapphireConfig.disableEntityStuckChecks) // Sapphire
             if ((!gg.pufferfish.pufferfish.PufferfishConfig.enableSuffocationOptimization || (tickCount % 10 == 0 && couldPossiblyBeHurt(1.0F))) && this.isInWall()) { // Pufferfish - optimize suffocation
                 this.hurt(DamageSource.IN_WALL, 1.0F);
             } else if (flag && !this.level.getWorldBorder().isWithinBounds(this.getBoundingBox())) {
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 018a5c13d3f0321d4346e6c1845f1aed2b8de3dd..c702d8e5d0114cb685f8cee2defc88475b26635b 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -172,6 +172,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         return this.paperConfig;
     }
     // Paper end
+    public final io.sapphiremc.sapphire.SapphireWorldConfig sapphireConfig; // Sapphire
 
     public final com.destroystokyo.paper.antixray.ChunkPacketBlockController chunkPacketBlockController; // Paper - Anti-Xray
     public final org.purpurmc.purpur.PurpurWorldConfig purpurConfig; // Purpur
@@ -332,6 +333,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         this.paperConfig = paperWorldConfigCreator.apply(this.spigotConfig); // Paper
         this.purpurConfig = new org.purpurmc.purpur.PurpurWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName(), env); // Purpur
         this.playerBreedingCooldowns = this.getNewBreedingCooldownCache(); // Purpur
+        this.sapphireConfig = new io.sapphiremc.sapphire.SapphireWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName()); // Sapphire
         this.generator = gen;
         this.world = new CraftWorld((ServerLevel) this, gen, biomeProvider, env);
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 5b02e7e9a47f9a962aa3da062105756863ffa4e0..cfd35158f414745d06ca05b9d003c71c1c680e06 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -991,6 +991,7 @@ public final class CraftServer implements Server {
         org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
         this.console.paperConfigurations.reloadConfigs(this.console);
         org.purpurmc.purpur.PurpurConfig.init((File) console.options.valueOf("purpur-settings")); // Purpur
+        io.sapphiremc.sapphire.SapphireConfig.init((File) console.options.valueOf("sapphire-settings")); // Sapphire
         for (ServerLevel world : this.console.getAllLevels()) {
             // world.serverLevelData.setDifficulty(config.difficulty); // Paper - per level difficulty
             world.setSpawnSettings(world.serverLevelData.getDifficulty() != Difficulty.PEACEFUL && config.spawnMonsters, config.spawnAnimals); // Paper - per level difficulty (from MinecraftServer#setDifficulty(ServerLevel, Difficulty, boolean))
@@ -1007,6 +1008,7 @@ public final class CraftServer implements Server {
             }
             world.spigotConfig.init(); // Spigot
             world.purpurConfig.init(); // Purpur
+            world.sapphireConfig.init(); // Sapphire
         }
 
         Plugin[] pluginClone = pluginManager.getPlugins().clone(); // Paper
@@ -2825,6 +2827,13 @@ public final class CraftServer implements Server {
         }
         // Purpur end
 
+        // Sapphire start
+        @Override
+        public YamlConfiguration getSapphireConfig() {
+            return io.sapphiremc.sapphire.SapphireConfig.config;
+        }
+        // Sapphire end
+
         @Override
         public void restart() {
             org.spigotmc.RestartCommand.restart();
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 01ffcda7d78ba5c274f12a038b45a78392b5e865..4e337171442044b887a93b50ca3cd5c91fc792ab 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -151,6 +151,14 @@ public class Main {
                         .defaultsTo(new File("paper.yml"))
                         .describedAs("Yml file");
 
+                // Sapphire start
+                acceptsAll(asList("sapphire", "sapphire-settings"), "File for sapphire settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("sapphire.yml"))
+                        .describedAs("Yml file");
+                // Sapphire end
+
                 acceptsAll(asList("add-plugin", "add-extra-plugin-jar"), "Specify paths to extra plugin jars to be loaded in addition to those in the plugins folder. This argument can be specified multiple times, once for each extra plugin jar path.")
                         .withRequiredArg()
                         .ofType(File.class)
diff --git a/src/main/java/org/purpurmc/purpur/PurpurConfig.java b/src/main/java/org/purpurmc/purpur/PurpurConfig.java
index d44b8ce90db7c6c27f71aa841d6fb64b159b7b42..b912117e95f1b745a94f8ff834711470ceec5477 100644
--- a/src/main/java/org/purpurmc/purpur/PurpurConfig.java
+++ b/src/main/java/org/purpurmc/purpur/PurpurConfig.java
@@ -235,6 +235,19 @@ public class PurpurConfig {
         if (!TimingsManager.hiddenConfigs.contains("settings.seed")) TimingsManager.hiddenConfigs.add("settings.seed");
     }
 
+    // Sapphire start - move server mod name from sapphire.yml to purpur.yml
+    public static void setServerModName(String s) {
+        if (serverModName.equals("Purpur")) {
+            set("settings.server-mod-name", s);
+            try {
+                config.save(CONFIG_FILE);
+            } catch (IOException ex) {
+                Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+            }
+        }
+    }
+    // Sapphire end
+
     public static String serverModName = "Purpur";
     private static void serverModName() {
         serverModName = getString("settings.server-mod-name", serverModName);
