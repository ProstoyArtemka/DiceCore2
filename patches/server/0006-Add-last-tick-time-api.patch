From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: DenaryDev <denaryplanet@gmail.com>
Date: Sat, 4 Dec 2021 00:02:37 +0500
Subject: [PATCH] Add last tick time api


diff --git a/src/main/java/io/sapphiremc/sapphire/utils/TimeUtils.java b/src/main/java/io/sapphiremc/sapphire/utils/TimeUtils.java
new file mode 100644
index 0000000000000000000000000000000000000000..ca0579ea56903778f469ada986c7b24467c0a6d4
--- /dev/null
+++ b/src/main/java/io/sapphiremc/sapphire/utils/TimeUtils.java
@@ -0,0 +1,18 @@
+package io.sapphiremc.sapphire.utils;
+
+import java.util.concurrent.TimeUnit;
+
+public class TimeUtils {
+
+    public static String getFriendlyName(TimeUnit unit) {
+        return switch (unit) {
+            case NANOSECONDS -> "ns";
+            case MICROSECONDS -> "micros";
+            case MILLISECONDS -> "ms";
+            case SECONDS -> "s";
+            case MINUTES -> "m";
+            case HOURS -> "h";
+            default -> throw new AssertionError();
+        };
+    }
+}
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index ef3a2b1773daccf7aa443e782622e44764d84528..ff5f8abe240884fa63aa37362f951723ad587d43 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1115,6 +1115,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     // Paper End
     // Spigot End
 
+    public static java.time.Duration lastTickDuration = java.time.Duration.ZERO; // Sapphire
+
     protected void runServer() {
         try {
             long serverStartTime = Util.getNanos(); // Paper
@@ -1184,7 +1186,9 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 this.nextTickTime += 50L;
                 this.startMetricsRecordingTick();
                 this.profiler.push("tick");
+                    long tickStart = System.nanoTime(); // Sapphire
                 this.tickServer(this::haveTime);
+                    lastTickDuration = java.time.Duration.ofNanos(System.nanoTime() - tickStart);
                 this.profiler.popPush("nextTickWait");
                 this.mayHaveDelayedTasks = true;
                 this.delayedTasksMaxNextTickTime = Math.max(Util.getMillis() + 50L, this.nextTickTime);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index da88de4283b9471666ed36ab993464f2918f5588..3c1cdaf6ba2c452d34edd9aef2b3bd4e43811911 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -2878,4 +2878,12 @@ public final class CraftServer implements Server {
     }
 
     // Paper end
+
+    // Sapphire start
+    @Override
+    @org.jetbrains.annotations.NotNull
+    public java.time.Duration getLastTickDuration() {
+        return net.minecraft.server.MinecraftServer.lastTickDuration;
+    }
+    // Sapphire end
 }
diff --git a/src/main/java/org/spigotmc/TicksPerSecondCommand.java b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
index 9bede6a26c08ede063c7a38f1149c811df14b258..77d20f9a30de06b6422849ffbe8d1e633b402e0e 100644
--- a/src/main/java/org/spigotmc/TicksPerSecondCommand.java
+++ b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
@@ -1,6 +1,5 @@
 package org.spigotmc;
 
-import net.minecraft.server.MinecraftServer;
 import org.bukkit.ChatColor;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
@@ -32,6 +31,10 @@ public class TicksPerSecondCommand extends Command
             tpsAvg[i] = TicksPerSecondCommand.format( tps[i] );
         }
         sender.sendMessage(ChatColor.GOLD + "TPS from last 1m, 5m, 15m: " + org.apache.commons.lang.StringUtils.join(tpsAvg, ", "));
+        // Sapphire start - Last tick time api
+        java.time.Duration lastTickTime = org.bukkit.Bukkit.getLastTickDuration();
+        sender.sendMessage(ChatColor.GOLD + "Last tick: " + formatLastTickTime( lastTickTime, java.util.concurrent.TimeUnit.MILLISECONDS ) + " (" + formatLastTickTime( lastTickTime, java.util.concurrent.TimeUnit.NANOSECONDS ) + ")");
+        // Sapphire end
         if (args.length > 0 && args[0].equals("mem") && sender.hasPermission("bukkit.command.tpsmemory")) {
             sender.sendMessage(ChatColor.GOLD + "Current Memory Usage: " + ChatColor.GREEN + ((Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / (1024 * 1024)) + "/" + (Runtime.getRuntime().totalMemory() / (1024 * 1024)) + " mb (Max: " + (Runtime.getRuntime().maxMemory() / (1024 * 1024)) + " mb)");
             if (!hasShownMemoryWarning) {
@@ -50,4 +53,18 @@ public class TicksPerSecondCommand extends Command
         return ( ( tps > 18.0 ) ? ChatColor.GREEN : ( tps > 16.0 ) ? ChatColor.YELLOW : ChatColor.RED ).toString()
                 + ( ( tps > 21.0 ) ? "*" : "" ) + Math.min( Math.round( tps * 100.0 ) / 100.0, 20.0 ); // Paper - only print * at 21, we commonly peak to 20.02 as the tick sleep is not accurate enough, stop the noise
     }
+
+    // Sapphire start - Last tick time api
+    public static String formatLastTickTime(java.time.Duration duration, java.util.concurrent.TimeUnit unit)
+    {
+        java.util.concurrent.TimeUnit nanosUnit = java.util.concurrent.TimeUnit.NANOSECONDS;
+
+        long nanos = duration.toNanos();
+        long toAskedUnit = unit.convert( nanos, nanosUnit );
+        long ms = nanosUnit.toMillis( nanos );
+
+        ChatColor startingColor = ms < 40 ? ChatColor.GREEN : ( ms < 50 ) ? ChatColor.YELLOW : ChatColor.RED;
+        return startingColor.toString() + toAskedUnit + ChatColor.GOLD + io.sapphiremc.sapphire.utils.TimeUtils.getFriendlyName( unit );
+    }
+    // Sapphire end
 }
