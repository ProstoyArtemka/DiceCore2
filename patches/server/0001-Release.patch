From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: ProstoyArtemka <ProstoyArtemka@yandex.ru>
Date: Wed, 3 Jan 2024 18:30:21 +0700
Subject: [PATCH] Release


diff --git a/build.gradle.kts b/build.gradle.kts
index fc69eb68a732ede332b2e80bda8af9033aa6ec02..242cd49dfbad6b0a14dad959b9149c536b961256 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -13,7 +13,7 @@ configurations.named(log4jPlugins.compileClasspathConfigurationName) {
 val alsoShade: Configuration by configurations.creating
 
 dependencies {
-    implementation(project(":pufferfish-api")) // Pufferfish // Paper
+    implementation(project(":dice-api")) // Pufferfish // Paper
     // Pufferfish start
     implementation("io.papermc.paper:paper-mojangapi:1.19.2-R0.1-SNAPSHOT") {
         exclude("io.papermc.paper", "paper-api")
diff --git a/src/main/java/io/papermc/paper/threadedregions/EntityScheduler.java b/src/main/java/io/papermc/paper/threadedregions/EntityScheduler.java
index 62484ebf4550b05182f693a3180bbac5d5fd906d..833ffacc1c6822ff434c34d3a0f76dec5dbf7231 100644
--- a/src/main/java/io/papermc/paper/threadedregions/EntityScheduler.java
+++ b/src/main/java/io/papermc/paper/threadedregions/EntityScheduler.java
@@ -5,6 +5,8 @@ import io.papermc.paper.util.TickThread;
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
 import net.minecraft.world.entity.Entity;
 import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.entity.EntityType;
+import org.ospaindustries.block.CustomBlock;
 
 import java.util.ArrayDeque;
 import java.util.ArrayList;
@@ -177,5 +179,23 @@ public final class EntityScheduler {
                 break;
             }
         }
+
+        tickEntity();
+        tickBlock();
+    }
+
+    private void tickEntity() {
+        if (this.entity.isCustom())
+            this.entity.toCustom().getBehavior().tick(this.entity.toCustom());
+    }
+
+    private void tickBlock() {
+        if (this.entity.getType() == EntityType.ITEM_DISPLAY) {
+            CustomBlock customBlock = CustomBlock.fromBlock(this.entity.getLocation().getBlock());
+            if (customBlock == null) return;
+            if (!customBlock.exist()) return;
+
+            customBlock.getBehavior().tick(customBlock);
+        }
     }
 }
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 20cd751a602593740e87eb79d5059b5fc7856cb5..d4d945a8ca13ae23e9c2f74990839140c83f2512 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -186,6 +186,9 @@ import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.BooleanOp;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import org.bukkit.entity.EntityType;
+import org.ospaindustries.entity.CustomEntity;
+import org.ospaindustries.item.CustomItem;
 import org.slf4j.Logger;
 
 // CraftBukkit start
@@ -2755,7 +2758,6 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
                                     ServerGamePacketListenerImpl.this.player.swing(enumhand, true);
                                 }
                             }
-
                         }
                     }
 
@@ -2769,6 +2771,52 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
                         this.performInteraction(hand, (entityplayer, entity1, enumhand1) -> {
                             return entity1.interactAt(entityplayer, pos, enumhand1);
                         }, new PlayerInteractAtEntityEvent(ServerGamePacketListenerImpl.this.getCraftPlayer(), entity.getBukkitEntity(), new org.bukkit.util.Vector(pos.x, pos.y, pos.z), (hand == InteractionHand.OFF_HAND) ? EquipmentSlot.OFF_HAND : EquipmentSlot.HAND)); // CraftBukkit
+
+                        itemInteractions(hand, pos);
+                        blockInteractions(hand, pos);
+                    }
+
+                    private void blockInteractions(InteractionHand hand, Vec3 pos) {
+                        CraftPlayer player = ServerGamePacketListenerImpl.this.getCraftPlayer();
+                        org.bukkit.entity.Entity bukkitEntity = entity.getBukkitEntity();
+
+                        PlayerInteractAtEntityEvent playerInteractAtEntityEvent = new PlayerInteractAtEntityEvent(player, bukkitEntity, new org.bukkit.util.Vector(pos.x, pos.y, pos.z), (hand == InteractionHand.OFF_HAND) ? EquipmentSlot.OFF_HAND : EquipmentSlot.HAND);
+
+                        if (bukkitEntity.isCustom()) {
+                            CustomEntity customEntity = bukkitEntity.toCustom();
+
+                            if (customEntity == null) return;
+
+                            customEntity.getBehavior().interactionAtEntity(playerInteractAtEntityEvent);
+                        }
+
+                        if (bukkitEntity.getType() == EntityType.INTERACTION) {
+                            if (!bukkitEntity.isInsideVehicle()) return;
+                            org.bukkit.entity.Entity vehicle = bukkitEntity.getVehicle();
+
+                            if (vehicle == null) return;
+
+                            if (vehicle.isCustom()) {
+                                CustomEntity customEntity = vehicle.toCustom();
+
+                                if (customEntity != null) customEntity.getBehavior().interactionAtHitBox(playerInteractAtEntityEvent, vehicle.toCustom());
+                            }
+                        }
+                    }
+
+                    private void itemInteractions(InteractionHand hand, Vec3 pos) {
+                        CraftPlayer player = ServerGamePacketListenerImpl.this.getCraftPlayer();
+
+                        EquipmentSlot slot = hand == InteractionHand.OFF_HAND ? EquipmentSlot.OFF_HAND : EquipmentSlot.HAND;
+                        CustomItem customItem = player.getInventory().getItem(slot).toCustomItem();
+
+                        if (!player.getInventory().getItemInMainHand().isCustom()) return;
+                        if (customItem == null) return;
+                        if (customItem.getBehavior() == null) return;
+
+                        PlayerInteractAtEntityEvent playerInteractAtEntityEvent = new PlayerInteractAtEntityEvent(player, entity.getBukkitEntity(), new org.bukkit.util.Vector(pos.x, pos.y, pos.z), EquipmentSlot.HAND);
+
+                        customItem.getBehavior().onInteractAtEntity(playerInteractAtEntityEvent);
                     }
 
                     @Override
@@ -3109,6 +3157,9 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
                         event.setCancelled(cancelled);
                         AbstractContainerMenu oldContainer = this.player.containerMenu; // SPIGOT-1224
                         this.cserver.getPluginManager().callEvent(event);
+
+                        interactCustomItem(event);
+
                         if (this.player.containerMenu != oldContainer) {
                             return;
                         }
@@ -3196,6 +3247,20 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
         }
     }
 
+    private void interactCustomItem(InventoryClickEvent event) {
+        if (event.getCursor().isCustom()) {
+            CustomItem customItem = event.getCursor().toCustomItem();
+
+            if (customItem.getBehavior() != null) customItem.getBehavior().onInventoryClickWithCustomItem(event);
+        }
+
+        if (event.getCurrentItem() != null && event.getCurrentItem().isCustom()) {
+            CustomItem customItem = event.getCurrentItem().toCustomItem();
+
+            if (customItem.getBehavior() != null) customItem.getBehavior().onInventoryClickAtCustomItem(event);
+        }
+    }
+
     @Override
     public void handlePlaceRecipe(ServerboundPlaceRecipePacket packet) {
         // Paper start
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 3e597833b57377b855505b8a0f2744801c791f90..cbdde49664ce296960dad40b2ebc0960c071f7cb 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -111,6 +111,7 @@ import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.scores.PlayerTeam;
 import net.minecraft.world.scores.Scoreboard;
+import org.ospaindustries.item.CustomItem;
 import org.slf4j.Logger;
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
@@ -772,6 +773,12 @@ public abstract class Player extends LivingEntity {
             PlayerDropItemEvent event = new PlayerDropItemEvent(player, drop);
             this.level().getCraftServer().getPluginManager().callEvent(event);
 
+            if (drop.getItemStack().isCustom()) {
+                CustomItem customItem = drop.getItemStack().toCustomItem();
+
+                if (customItem.getBehavior() != null) customItem.getBehavior().onDropItem(event);
+            }
+
             if (event.isCancelled()) {
                 org.bukkit.inventory.ItemStack cur = player.getInventory().getItemInHand();
                 if (flag1 && (cur == null || cur.getAmount() == 0)) {
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index f67ec3f5f4b7e2f678609f2387cc8afa2adce161..2d40fc5b9d1e6461c431e3703236ba0d26eb6560 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -91,6 +91,7 @@ import org.bukkit.craftbukkit.inventory.CraftInventoryCrafting;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.inventory.CraftMetaBook;
 import org.bukkit.craftbukkit.potion.CraftPotionUtil;
+import org.bukkit.craftbukkit.scheduler.MinecraftInternalPlugin;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.craftbukkit.util.CraftVector;
@@ -241,6 +242,10 @@ import org.bukkit.inventory.Recipe;
 import org.bukkit.inventory.meta.BookMeta;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.util.Vector;
+import org.ospaindustries.block.CustomBlock;
+import org.ospaindustries.entity.CustomEntity;
+import org.ospaindustries.item.CustomItem;
+import org.ospaindustries.utils.BreakBlockRunnable;
 
 public class CraftEventFactory {
     public static org.bukkit.block.Block blockDamage; // For use in EntityDamageByBlockEvent
@@ -446,6 +451,20 @@ public class CraftEventFactory {
         BlockPlaceEvent event = new BlockPlaceEvent(placedBlock, replacedBlockState, blockClicked, item, player, canBuild, equipmentSlot);
         craftServer.getPluginManager().callEvent(event);
 
+        if (item.isCustom()) {
+            CustomItem customItem = item.toCustomItem();
+            if (customItem == null) return event;
+
+            if (customItem.isBlockItem()) {
+                CustomBlock customBlock = CustomBlock.fromBlockItem(customItem);
+
+                if (customBlock == null) return event;
+
+                customBlock.place(placedBlock.getLocation());
+                customBlock.getBehavior().placeBlock(event);
+            }
+        }
+
         return event;
     }
 
@@ -584,6 +603,7 @@ public class CraftEventFactory {
         if (cancelledBlock) {
             event.setUseInteractedBlock(Event.Result.DENY);
         }
+
         // Paper start
         if (cancelledItem) {
             event.setUseItemInHand(Result.DENY);
@@ -591,6 +611,18 @@ public class CraftEventFactory {
         // Paper end
         craftServer.getPluginManager().callEvent(event);
 
+        if (itemInHand != null && itemInHand.isCustom()) {
+            CustomItem customItem = itemInHand.toCustomItem();
+
+            if (customItem.getBehavior() != null) customItem.getBehavior().onInteract(event);
+        }
+
+        if (blockClicked != null && blockClicked.isCustom()) {
+            CustomBlock customBlock = blockClicked.toCustom();
+
+            if (customBlock.getBehavior() != null) customBlock.getBehavior().interact(event);
+        }
+
         return event;
     }
 
@@ -658,6 +690,16 @@ public class CraftEventFactory {
         BlockDamageEvent event = new BlockDamageEvent(player, blockClicked, CraftBlock.notchToBlockFace(direction), itemInHand, instaBreak); // Paper - Expose BlockFace
         player.getServer().getPluginManager().callEvent(event);
 
+        if (instaBreak) return event;
+
+        if (blockClicked.isCustom()) {
+            CustomBlock customBlock = blockClicked.toCustom();
+            if (!customBlock.exist()) return null;
+
+            new BreakBlockRunnable(customBlock, player).runTaskTimer(new MinecraftInternalPlugin(), 0, 1);
+            customBlock.getBehavior().startBreaking(event);
+        }
+
         return event;
     }
 
@@ -670,6 +712,16 @@ public class CraftEventFactory {
         BlockDamageAbortEvent event = new BlockDamageAbortEvent(player, blockClicked, itemInHand);
         player.getServer().getPluginManager().callEvent(event);
 
+        if (blockClicked.isCustom()) {
+            CustomBlock customBlock = blockClicked.toCustom();
+            if (!customBlock.exist()) return null;
+
+            BreakBlockRunnable.breakBlockRunnables.get(blockClicked.getLocation()).cancel();
+            BreakBlockRunnable.breakBlockRunnables.remove(blockClicked.getLocation());
+
+            customBlock.getBehavior().stopBreaking(event);
+        }
+
         return event;
     }
 
@@ -1054,6 +1106,8 @@ public class CraftEventFactory {
     }
 
     private static EntityDamageEvent handleEntityDamageEvent(Entity entity, DamageSource source, Map<DamageModifier, Double> modifiers, Map<DamageModifier, Function<? super Double, Double>> modifierFunctions, boolean cancelled) {
+        org.bukkit.entity.Entity bukkitEntity = entity.getBukkitEntity();
+
         if (source.is(DamageTypeTags.IS_EXPLOSION)) {
             DamageCause damageCause;
             Entity damager = CraftEventFactory.entityDamage;
@@ -1080,6 +1134,14 @@ public class CraftEventFactory {
             } else {
                 entity.lastDamageCancelled = true; // SPIGOT-5339, SPIGOT-6252, SPIGOT-6777: Keep track if the event was canceled
             }
+
+            if (bukkitEntity.isCustom()) {
+                CustomEntity customEntity = bukkitEntity.toCustom();
+                if (customEntity == null) return event;
+
+                customEntity.getBehavior().damageEntity(event);
+            }
+
             return event;
         } else if (source.getEntity() != null || source.getDirectEntity() != null) {
             Entity damager = source.getEntity();
@@ -1116,6 +1178,14 @@ public class CraftEventFactory {
             } else {
                 entity.lastDamageCancelled = true; // SPIGOT-5339, SPIGOT-6252, SPIGOT-6777: Keep track if the event was canceled
             }
+
+            if (bukkitEntity.isCustom()) {
+                CustomEntity customEntity = bukkitEntity.toCustom();
+                if (customEntity == null) return event;
+
+                customEntity.getBehavior().damageEntity(event);
+            }
+
             return event;
         } else if (source.is(DamageTypes.LAVA)) {
             EntityDamageEvent event = (new EntityDamageByBlockEvent(CraftEventFactory.blockDamage, entity.getBukkitEntity(), DamageCause.LAVA, modifiers, modifierFunctions));
@@ -1158,6 +1228,14 @@ public class CraftEventFactory {
             } else {
                 entity.lastDamageCancelled = true; // SPIGOT-5339, SPIGOT-6252, SPIGOT-6777: Keep track if the event was canceled
             }
+
+            if (bukkitEntity.isCustom()) {
+                CustomEntity customEntity = bukkitEntity.toCustom();
+                if (customEntity == null) return event;
+
+                customEntity.getBehavior().damageEntity(event);
+            }
+
             return event;
         } else if (CraftEventFactory.entityDamage != null) {
             DamageCause cause = null;
@@ -1184,6 +1262,14 @@ public class CraftEventFactory {
             } else {
                 entity.lastDamageCancelled = true; // SPIGOT-5339, SPIGOT-6252, SPIGOT-6777: Keep track if the event was canceled
             }
+
+            if (bukkitEntity.isCustom()) {
+                CustomEntity customEntity = bukkitEntity.toCustom();
+                if (customEntity == null) return event;
+
+                customEntity.getBehavior().damageEntity(event);
+            }
+
             return event;
         }
 
@@ -1243,6 +1329,8 @@ public class CraftEventFactory {
     }
 
     private static EntityDamageEvent callEntityDamageEvent(Entity damager, Entity damagee, DamageCause cause, Map<DamageModifier, Double> modifiers, Map<DamageModifier, Function<? super Double, Double>> modifierFunctions, boolean cancelled, boolean critical) {
+        org.bukkit.entity.Entity bukkitEntity = damagee.getBukkitEntity();
+
         // Paper end
         EntityDamageEvent event;
         if (damager != null) {
@@ -1259,6 +1347,13 @@ public class CraftEventFactory {
             damagee.lastDamageCancelled = true; // SPIGOT-5339, SPIGOT-6252, SPIGOT-6777: Keep track if the event was canceled
         }
 
+        if (bukkitEntity.isCustom()) {
+            CustomEntity customEntity = bukkitEntity.toCustom();
+            if (customEntity == null) return event;
+
+            customEntity.getBehavior().damageEntity(event);
+        }
+
         return event;
     }
 
@@ -1968,6 +2063,15 @@ public class CraftEventFactory {
         EntityPickupItemEvent event = new EntityPickupItemEvent((LivingEntity) who.getBukkitEntity(), (Item) item.getBukkitEntity(), remaining);
         event.setCancelled(cancelled);
         Bukkit.getPluginManager().callEvent(event);
+
+        org.bukkit.inventory.ItemStack bukkitItem = ((Item) item.getBukkitEntity()).getItemStack();
+        if (bukkitItem.isCustom()) {
+            CustomItem customItem = bukkitItem.toCustomItem();
+
+            if (customItem.getBehavior() == null) return event;
+            customItem.getBehavior().onPickup(event);
+        }
+
         return event;
     }
 
