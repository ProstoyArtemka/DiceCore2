From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: ProstoyArtemka <ProstoyArtemka@yandex.ru>
Date: Tue, 2 Jan 2024 21:51:40 +0700
Subject: [PATCH] URA POBEDA


diff --git a/build.gradle.kts b/build.gradle.kts
index fc69eb68a732ede332b2e80bda8af9033aa6ec02..242cd49dfbad6b0a14dad959b9149c536b961256 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -13,7 +13,7 @@ configurations.named(log4jPlugins.compileClasspathConfigurationName) {
 val alsoShade: Configuration by configurations.creating
 
 dependencies {
-    implementation(project(":pufferfish-api")) // Pufferfish // Paper
+    implementation(project(":dice-api")) // Pufferfish // Paper
     // Pufferfish start
     implementation("io.papermc.paper:paper-mojangapi:1.19.2-R0.1-SNAPSHOT") {
         exclude("io.papermc.paper", "paper-api")
diff --git a/src/main/java/io/papermc/paper/threadedregions/EntityScheduler.java b/src/main/java/io/papermc/paper/threadedregions/EntityScheduler.java
index 62484ebf4550b05182f693a3180bbac5d5fd906d..75de6f126035392c6a4ae55606c9ad60bb01773a 100644
--- a/src/main/java/io/papermc/paper/threadedregions/EntityScheduler.java
+++ b/src/main/java/io/papermc/paper/threadedregions/EntityScheduler.java
@@ -5,6 +5,7 @@ import io.papermc.paper.util.TickThread;
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
 import net.minecraft.world.entity.Entity;
 import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.ospaindustries.entity.CustomEntity;
 
 import java.util.ArrayDeque;
 import java.util.ArrayList;
@@ -177,5 +178,12 @@ public final class EntityScheduler {
                 break;
             }
         }
+
+        if (!this.entity.isCustom()) return;
+
+        CustomEntity customEntity = this.entity.toCustom();
+        if (customEntity == null) return;
+
+        customEntity.getBehavior().tick(customEntity);
     }
 }
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 20cd751a602593740e87eb79d5059b5fc7856cb5..2833f010d505721da248d8673d113c007fc6d214 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -11,6 +11,7 @@ import it.unimi.dsi.fastutil.ints.Int2ObjectMaps;
 import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
 import java.net.SocketAddress;
+import java.time.Instant;
 import java.util.Collections;
 import java.util.EnumSet;
 import java.util.Iterator;
@@ -19,9 +20,9 @@ import java.util.Map;
 import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
-import java.util.UUID;
 import java.util.concurrent.CancellationException;
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.BiFunction;
 import java.util.function.Consumer;
 import java.util.function.UnaryOperator;
@@ -91,7 +92,6 @@ import net.minecraft.network.protocol.game.ServerboundConfigurationAcknowledgedP
 import net.minecraft.network.protocol.game.ServerboundContainerButtonClickPacket;
 import net.minecraft.network.protocol.game.ServerboundContainerClickPacket;
 import net.minecraft.network.protocol.game.ServerboundContainerClosePacket;
-import net.minecraft.network.protocol.game.ServerboundContainerSlotStateChangedPacket;
 import net.minecraft.network.protocol.game.ServerboundEditBookPacket;
 import net.minecraft.network.protocol.game.ServerboundEntityTagQuery;
 import net.minecraft.network.protocol.game.ServerboundInteractPacket;
@@ -135,7 +135,6 @@ import net.minecraft.util.FutureChain;
 import net.minecraft.util.Mth;
 import net.minecraft.util.SignatureValidator;
 import net.minecraft.util.StringUtil;
-import net.minecraft.world.Container;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.effect.MobEffects;
@@ -152,12 +151,6 @@ import net.minecraft.world.entity.player.Inventory;
 import net.minecraft.world.entity.player.ProfilePublicKey;
 import net.minecraft.world.entity.projectile.AbstractArrow;
 import net.minecraft.world.entity.vehicle.Boat;
-import net.minecraft.world.inventory.AbstractContainerMenu;
-import net.minecraft.world.inventory.AnvilMenu;
-import net.minecraft.world.inventory.BeaconMenu;
-import net.minecraft.world.inventory.CrafterMenu;
-import net.minecraft.world.inventory.MerchantMenu;
-import net.minecraft.world.inventory.RecipeBookMenu;
 import net.minecraft.world.item.BlockItem;
 import net.minecraft.world.item.BucketItem;
 import net.minecraft.world.item.Item;
@@ -173,7 +166,6 @@ import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.CommandBlock;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.entity.CommandBlockEntity;
-import net.minecraft.world.level.block.entity.CrafterBlockEntity;
 import net.minecraft.world.level.block.entity.JigsawBlockEntity;
 import net.minecraft.world.level.block.entity.SignBlockEntity;
 import net.minecraft.world.level.block.entity.StructureBlockEntity;
@@ -186,6 +178,10 @@ import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.BooleanOp;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import org.bukkit.Bukkit;
+import org.bukkit.entity.EntityType;
+import org.ospaindustries.entity.CustomEntity;
+import org.ospaindustries.item.CustomItem;
 import org.slf4j.Logger;
 
 // CraftBukkit start
@@ -195,11 +191,15 @@ import com.mojang.datafixers.util.Pair;
 import java.util.Arrays;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.atomic.AtomicInteger;
-import java.util.function.Function;
 import net.minecraft.network.chat.OutgoingChatMessage;
 import net.minecraft.world.entity.animal.Bucketable;
 import net.minecraft.world.entity.animal.allay.Allay;
 import net.minecraft.world.entity.item.ItemEntity;
+import net.minecraft.world.inventory.AbstractContainerMenu;
+import net.minecraft.world.inventory.AnvilMenu;
+import net.minecraft.world.inventory.BeaconMenu;
+import net.minecraft.world.inventory.MerchantMenu;
+import net.minecraft.world.inventory.RecipeBookMenu;
 import net.minecraft.world.inventory.Slot;
 import net.minecraft.world.item.crafting.RecipeHolder;
 import org.bukkit.Location;
@@ -285,27 +285,28 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
     private int aboveGroundVehicleTickCount;
     private int receivedMovePacketCount;
     private int knownMovePacketCount;
+    private final AtomicReference<Instant> lastChatTimeStamp;
     @Nullable
     private RemoteChatSession chatSession;
     private boolean hasLoggedExpiry = false; // Paper
     private SignedMessageChain.Decoder signedMessageDecoder;
-    private final LastSeenMessagesValidator lastSeenMessages = new LastSeenMessagesValidator(20);
-    private final MessageSignatureCache messageSignatureCache = MessageSignatureCache.createDefault();
+    private final LastSeenMessagesValidator lastSeenMessages;
+    private final MessageSignatureCache messageSignatureCache;
     private final FutureChain chatMessageChain;
     private boolean waitingForSwitchToConfig;
     private static final int MAX_SIGN_LINE_LENGTH = Integer.getInteger("Paper.maxSignLength", 80); // Paper
 
     public ServerGamePacketListenerImpl(MinecraftServer server, Connection connection, ServerPlayer player, CommonListenerCookie clientData) {
         super(server, connection, clientData, player); // CraftBukkit
+        this.lastChatTimeStamp = new AtomicReference(Instant.EPOCH);
+        this.lastSeenMessages = new LastSeenMessagesValidator(20);
+        this.messageSignatureCache = MessageSignatureCache.createDefault();
         this.chunkSender = new PlayerChunkSender(connection.isMemoryConnection());
         connection.setListener(this);
         this.player = player;
         player.connection = this;
         player.getTextFilter().join();
-        UUID uuid = player.getUUID();
-
-        Objects.requireNonNull(server);
-        this.signedMessageDecoder = SignedMessageChain.Decoder.unsigned(uuid, server::enforceSecureProfile);
+        this.signedMessageDecoder = server.enforceSecureProfile() ? SignedMessageChain.Decoder.REJECT_ALL : SignedMessageChain.Decoder.unsigned(player.getUUID());
         this.chatMessageChain = new FutureChain(server.chatExecutor); // CraftBukkit - async chat
     }
 
@@ -747,7 +748,6 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
     @Override
     public void handleRecipeBookChangeSettingsPacket(ServerboundRecipeBookChangeSettingsPacket packet) {
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.serverLevel());
-        CraftEventFactory.callRecipeBookSettingsEvent(this.player, packet.getBookType(), packet.isOpen(), packet.isFiltering()); // CraftBukkit
         this.player.getRecipeBook().setBookSetting(packet.getBookType(), packet.isOpen(), packet.isFiltering());
     }
 
@@ -1031,7 +1031,7 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
                     } else if (packet.getUpdateType() == StructureBlockEntity.UpdateType.LOAD_AREA) {
                         if (!tileentitystructure.isStructureLoadable()) {
                             this.player.displayClientMessage(Component.translatable("structure_block.load_not_found", s), false);
-                        } else if (tileentitystructure.placeStructureIfSameSize(this.player.serverLevel())) {
+                        } else if (tileentitystructure.loadStructure(this.player.serverLevel())) {
                             this.player.displayClientMessage(Component.translatable("structure_block.load_success", s), false);
                         } else {
                             this.player.displayClientMessage(Component.translatable("structure_block.load_prepare", s), false);
@@ -1070,8 +1070,6 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
                 tileentityjigsaw.setPool(ResourceKey.create(Registries.TEMPLATE_POOL, packet.getPool()));
                 tileentityjigsaw.setFinalState(packet.getFinalState());
                 tileentityjigsaw.setJoint(packet.getJoint());
-                tileentityjigsaw.setPlacementPriority(packet.getPlacementPriority());
-                tileentityjigsaw.setSelectionPriority(packet.getSelectionPriority());
                 tileentityjigsaw.setChanged();
                 this.player.level().sendBlockUpdated(blockposition, iblockdata, iblockdata, 3);
             }
@@ -1275,26 +1273,6 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
         }
     }
 
-    @Override
-    public void handleContainerSlotStateChanged(ServerboundContainerSlotStateChangedPacket packet) {
-        PacketUtils.ensureRunningOnSameThread(packet, this, this.player.serverLevel());
-        if (!this.player.isSpectator() && packet.containerId() == this.player.containerMenu.containerId) {
-            AbstractContainerMenu container = this.player.containerMenu;
-
-            if (container instanceof CrafterMenu) {
-                CrafterMenu craftermenu = (CrafterMenu) container;
-                Container iinventory = craftermenu.getContainer();
-
-                if (iinventory instanceof CrafterBlockEntity) {
-                    CrafterBlockEntity crafterblockentity = (CrafterBlockEntity) iinventory;
-
-                    crafterblockentity.setSlotState(packet.slotId(), packet.newState());
-                }
-            }
-
-        }
-    }
-
     @Override
     public void handleBlockEntityTagQuery(ServerboundBlockEntityTagQuery packet) {
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.serverLevel());
@@ -1371,61 +1349,59 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
                             }
 
                         } else {
-                            if (worldserver.tickRateManager().runsNormally()) {
-                                ++this.receivedMovePacketCount;
-                                int i = this.receivedMovePacketCount - this.knownMovePacketCount;
-
-                                // CraftBukkit start - handle custom speeds and skipped ticks
-                                this.allowedPlayerTicks += (System.currentTimeMillis() / 50) - this.lastTick;
-                                this.allowedPlayerTicks = Math.max(this.allowedPlayerTicks, 1);
-                                this.lastTick = (int) (System.currentTimeMillis() / 50);
-
-                                if (i > Math.max(this.allowedPlayerTicks, 5)) {
-                                    ServerGamePacketListenerImpl.LOGGER.debug("{} is sending move packets too frequently ({} packets since last tick)", this.player.getName().getString(), i);
-                                    i = 1;
-                                }
+                            ++this.receivedMovePacketCount;
+                            int i = this.receivedMovePacketCount - this.knownMovePacketCount;
 
-                                if (packet.hasRot || d10 > 0) {
-                                    this.allowedPlayerTicks -= 1;
-                                } else {
-                                    this.allowedPlayerTicks = 20;
-                                }
-                                double speed;
-                                if (this.player.getAbilities().flying) {
-                                    speed = this.player.getAbilities().flyingSpeed * 20f;
-                                } else {
-                                    speed = this.player.getAbilities().walkingSpeed * 10f;
+                            // CraftBukkit start - handle custom speeds and skipped ticks
+                            this.allowedPlayerTicks += (System.currentTimeMillis() / 50) - this.lastTick;
+                            this.allowedPlayerTicks = Math.max(this.allowedPlayerTicks, 1);
+                            this.lastTick = (int) (System.currentTimeMillis() / 50);
+
+                            if (i > Math.max(this.allowedPlayerTicks, 5)) {
+                                ServerGamePacketListenerImpl.LOGGER.debug("{} is sending move packets too frequently ({} packets since last tick)", this.player.getName().getString(), i);
+                                i = 1;
+                            }
+
+                            if (packet.hasRot || d10 > 0) {
+                                this.allowedPlayerTicks -= 1;
+                            } else {
+                                this.allowedPlayerTicks = 20;
+                            }
+                            double speed;
+                            if (this.player.getAbilities().flying) {
+                                speed = this.player.getAbilities().flyingSpeed * 20f;
+                            } else {
+                                speed = this.player.getAbilities().walkingSpeed * 10f;
+                            }
+                            // Paper start - Prevent moving into unloaded chunks
+                            if (this.player.level().paperConfig().chunks.preventMovingIntoUnloadedChunks && (this.player.getX() != toX || this.player.getZ() != toZ) && !worldserver.areChunksLoadedForMove(this.player.getBoundingBox().expandTowards(new Vec3(toX, toY, toZ).subtract(this.player.position())))) {
+                                // Paper start - Add fail move event
+                                io.papermc.paper.event.player.PlayerFailMoveEvent event = fireFailMove(io.papermc.paper.event.player.PlayerFailMoveEvent.FailReason.MOVED_INTO_UNLOADED_CHUNK,
+                                    toX, toY, toZ, toYaw, toPitch, false);
+                                if (!event.isAllowed()) {
+                                this.internalTeleport(this.player.getX(), this.player.getY(), this.player.getZ(), this.player.getYRot(), this.player.getXRot(), Collections.emptySet());
+                                return;
                                 }
-                                // Paper start - Prevent moving into unloaded chunks
-                                if (this.player.level().paperConfig().chunks.preventMovingIntoUnloadedChunks && (this.player.getX() != toX || this.player.getZ() != toZ) && !worldserver.areChunksLoadedForMove(this.player.getBoundingBox().expandTowards(new Vec3(toX, toY, toZ).subtract(this.player.position())))) {
+                                // Paper end
+                            }
+                            // Paper end
+
+                            if (!this.player.isChangingDimension() && (!this.player.level().getGameRules().getBoolean(GameRules.RULE_DISABLE_ELYTRA_MOVEMENT_CHECK) || !this.player.isFallFlying())) {
+                                float f2 = this.player.isFallFlying() ? 300.0F : 100.0F;
+
+                                if (d10 - d9 > Math.max(f2, Math.pow((double) (org.spigotmc.SpigotConfig.movedTooQuicklyMultiplier * (float) i * speed), 2)) && !this.isSingleplayerOwner()) {
+                                // CraftBukkit end
                                     // Paper start - Add fail move event
-                                    io.papermc.paper.event.player.PlayerFailMoveEvent event = fireFailMove(io.papermc.paper.event.player.PlayerFailMoveEvent.FailReason.MOVED_INTO_UNLOADED_CHUNK,
-                                        toX, toY, toZ, toYaw, toPitch, false);
+                                    io.papermc.paper.event.player.PlayerFailMoveEvent event = fireFailMove(io.papermc.paper.event.player.PlayerFailMoveEvent.FailReason.MOVED_TOO_QUICKLY,
+                                        toX, toY, toZ, toYaw, toPitch, true);
                                     if (!event.isAllowed()) {
-                                        this.internalTeleport(this.player.getX(), this.player.getY(), this.player.getZ(), this.player.getYRot(), this.player.getXRot(), Collections.emptySet());
-                                        return;
+                                        if (event.getLogWarning())
+                                    ServerGamePacketListenerImpl.LOGGER.warn("{} moved too quickly! {},{},{}", new Object[]{this.player.getName().getString(), d6, d7, d8});
+                                    this.teleport(this.player.getX(), this.player.getY(), this.player.getZ(), this.player.getYRot(), this.player.getXRot());
+                                    return;
                                     }
                                     // Paper end
                                 }
-                                // Paper end
-
-                                if (!this.player.isChangingDimension() && (!this.player.level().getGameRules().getBoolean(GameRules.RULE_DISABLE_ELYTRA_MOVEMENT_CHECK) || !this.player.isFallFlying())) {
-                                    float f2 = this.player.isFallFlying() ? 300.0F : 100.0F;
-
-                                    if (d10 - d9 > Math.max(f2, Math.pow((double) (org.spigotmc.SpigotConfig.movedTooQuicklyMultiplier * (float) i * speed), 2)) && !this.isSingleplayerOwner()) {
-                                    // CraftBukkit end
-                                        // Paper start - Add fail move event
-                                        io.papermc.paper.event.player.PlayerFailMoveEvent event = fireFailMove(io.papermc.paper.event.player.PlayerFailMoveEvent.FailReason.MOVED_TOO_QUICKLY,
-                                            toX, toY, toZ, toYaw, toPitch, true);
-                                        if (!event.isAllowed()) {
-                                            if (event.getLogWarning())
-                                                ServerGamePacketListenerImpl.LOGGER.warn("{} moved too quickly! {},{},{}", new Object[]{this.player.getName().getString(), d6, d7, d8});
-                                            this.teleport(this.player.getX(), this.player.getY(), this.player.getZ(), this.player.getYRot(), this.player.getXRot());
-                                            return;
-                                        }
-                                        // Paper end
-                                    }
-                                }
                             }
 
                             AABB axisalignedbb = this.player.getBoundingBox(); // Paper - diff on change, should be old AABB
@@ -2144,9 +2120,11 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
         }
         // CraftBukkit end
         if (ServerGamePacketListenerImpl.isChatMessageIllegal(packet.message())) {
+            this.server.scheduleOnMain(() -> { // Paper - push to main for event firing
             this.disconnect(Component.translatable("multiplayer.disconnect.illegal_characters"), org.bukkit.event.player.PlayerKickEvent.Cause.ILLEGAL_CHARACTERS); // Paper - add cause
+            }); // Paper - push to main for event firing
         } else {
-            Optional<LastSeenMessages> optional = this.tryHandleChat(packet.lastSeenMessages());
+            Optional<LastSeenMessages> optional = this.tryHandleChat(packet.message(), packet.timeStamp(), packet.lastSeenMessages());
 
             if (optional.isPresent()) {
                 // this.server.submit(() -> { // CraftBukkit - async chat
@@ -2159,13 +2137,14 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
                         return;
                     }
 
-                    CompletableFuture<FilteredText> completablefuture = this.filterTextPacket(playerchatmessage.signedContent()).thenApplyAsync(Function.identity(), this.server.chatExecutor); // CraftBukkit - async chat
+                    CompletableFuture<FilteredText> completablefuture = this.filterTextPacket(playerchatmessage.signedContent());
                     CompletableFuture<ChatDecorator.Result> componentFuture = this.server.getChatDecorator().decorate(this.player, null, playerchatmessage.decoratedContent()); // Paper
 
-                    this.chatMessageChain.append(CompletableFuture.allOf(completablefuture, componentFuture), (filteredtext) -> {
-                        PlayerChatMessage playerchatmessage1 = playerchatmessage.filter(completablefuture.join().mask()).withResult(componentFuture.join()); // Paper
-
-                        this.broadcastChatMessage(playerchatmessage1);
+                    this.chatMessageChain.append((executor) -> {
+                        return CompletableFuture.allOf(completablefuture, componentFuture).thenAcceptAsync((filtered) -> { // Paper
+                            PlayerChatMessage playerchatmessage1 = playerchatmessage.filter(completablefuture.join().mask()).withResult(componentFuture.join()); // Paper
+                            this.broadcastChatMessage(playerchatmessage1);
+                        }, this.server.chatExecutor); // CraftBukkit - async chat
                     });
                 // }); // CraftBukkit - async chat
             }
@@ -2176,9 +2155,11 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
     @Override
     public void handleChatCommand(ServerboundChatCommandPacket packet) {
         if (ServerGamePacketListenerImpl.isChatMessageIllegal(packet.command())) {
+            this.server.scheduleOnMain(() -> { // Paper - push to main for event firing
             this.disconnect(Component.translatable("multiplayer.disconnect.illegal_characters"), org.bukkit.event.player.PlayerKickEvent.Cause.ILLEGAL_CHARACTERS); // Paper
+            }); // Paper - push to main for event firing
         } else {
-            Optional<LastSeenMessages> optional = this.tryHandleChat(packet.lastSeenMessages());
+            Optional<LastSeenMessages> optional = this.tryHandleChat(packet.command(), packet.timeStamp(), packet.lastSeenMessages());
 
             if (optional.isPresent()) {
                 this.server.submit(() -> {
@@ -2232,7 +2213,6 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
     }
 
     private void handleMessageDecodeFailure(SignedMessageChain.DecodeException exception) {
-        ServerGamePacketListenerImpl.LOGGER.warn("Failed to update secure chat state for {}: '{}'", this.player.getGameProfile().getName(), exception.getComponent().getString());
         if (exception.shouldDisconnect()) {
             this.disconnect(exception.getComponent(), exception.kickCause); // Paper - kick event causes
         } else {
@@ -2262,15 +2242,23 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
         return com_mojang_brigadier_commanddispatcher.parse(command, this.player.createCommandSourceStack());
     }
 
-    private Optional<LastSeenMessages> tryHandleChat(LastSeenMessages.Update acknowledgment) {
-        Optional<LastSeenMessages> optional = this.unpackAndApplyLastSeen(acknowledgment);
-
-        if (this.player.isRemoved() || this.player.getChatVisibility() == ChatVisiblity.HIDDEN) { // CraftBukkit - dead men tell no tales
-            this.send(new ClientboundSystemChatPacket(Component.translatable("chat.disabled.options").withStyle(ChatFormatting.RED), false));
+    private Optional<LastSeenMessages> tryHandleChat(String message, Instant timestamp, LastSeenMessages.Update acknowledgment) {
+        if (!this.updateChatOrder(timestamp)) {
+            ServerGamePacketListenerImpl.LOGGER.warn("{} sent out-of-order chat: '{}': {} > {}", this.player.getName().getString(), message, this.lastChatTimeStamp.get().getEpochSecond(), timestamp.getEpochSecond()); // Paper
+            this.server.scheduleOnMain(() -> { // Paper - push to main
+            this.disconnect(Component.translatable("multiplayer.disconnect.out_of_order_chat"), org.bukkit.event.player.PlayerKickEvent.Cause.OUT_OF_ORDER_CHAT); // Paper - kick event causes
+            }); // Paper - push to main
             return Optional.empty();
         } else {
-            this.player.resetLastActionTime();
-            return optional;
+            Optional<LastSeenMessages> optional = this.unpackAndApplyLastSeen(acknowledgment);
+
+            if (this.player.isRemoved() || this.player.getChatVisibility() == ChatVisiblity.HIDDEN) { // CraftBukkit - dead men tell no tales
+                this.send(new ClientboundSystemChatPacket(PaperAdventure.asAdventure(Component.translatable("chat.disabled.options").withStyle(ChatFormatting.RED)), false)); // Paper - Adventure
+                return Optional.empty();
+            } else {
+                this.player.resetLastActionTime();
+                return optional;
+            }
         }
     }
 
@@ -2289,6 +2277,20 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
         }
     }
 
+    private boolean updateChatOrder(Instant timestamp) {
+        if (gg.pufferfish.pufferfish.PufferfishConfig.disableOutOfOrderChat) return true;
+        Instant instant1;
+
+        do {
+            instant1 = (Instant) this.lastChatTimeStamp.get();
+            if (timestamp.isBefore(instant1)) {
+                return false;
+            }
+        } while (!this.lastChatTimeStamp.compareAndSet(instant1, timestamp));
+
+        return true;
+    }
+
     public static boolean isChatMessageIllegal(String message) {
         for (int i = 0; i < message.length(); ++i) {
             if (!SharedConstants.isAllowedChatCharacter(message.charAt(i))) {
@@ -2440,7 +2442,7 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
                 }
             });
         } else if (this.player.getChatVisibility() == ChatVisiblity.SYSTEM) { // Re-add "Command Only" flag check
-            this.send(new ClientboundSystemChatPacket(Component.translatable("chat.cannotSend").withStyle(ChatFormatting.RED), false));
+            this.send(new ClientboundSystemChatPacket(PaperAdventure.asAdventure(Component.translatable("chat.cannotSend").withStyle(ChatFormatting.RED)), false)); // Paper - Adventure
         } else {
             this.chat(s, message, true);
         }
@@ -2508,7 +2510,7 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
         } else { // Paper start - Fix interact event not being called sometimes
             GameType gameType = this.player.gameMode.getGameModeForPlayer();
             if (gameType == GameType.ADVENTURE && result.getHitBlock() != null) {
-                CraftEventFactory.callPlayerInteractEvent(this.player, Action.LEFT_CLICK_BLOCK, ((org.bukkit.craftbukkit.block.CraftBlock) result.getHitBlock()).getPosition(), org.bukkit.craftbukkit.block.CraftBlock.blockFaceToNotch(result.getHitBlockFace()), this.player.getInventory().getSelected(), InteractionHand.MAIN_HAND);
+                CraftEventFactory.callPlayerInteractEvent(this.player, Action.LEFT_CLICK_BLOCK, io.papermc.paper.util.MCUtil.toBlockPosition(result.getHitPosition()), org.bukkit.craftbukkit.block.CraftBlock.blockFaceToNotch(result.getHitBlockFace()), this.player.getInventory().getSelected(), InteractionHand.MAIN_HAND);
             } else if (gameType != GameType.CREATIVE && result.getHitEntity() != null && origin.toVector().distanceSquared(result.getHitPosition()) > 3.0D * 3.0D) {
                 CraftEventFactory.callPlayerInteractEvent(this.player, Action.LEFT_CLICK_AIR, this.player.getInventory().getSelected(), InteractionHand.MAIN_HAND);
             }
@@ -2620,7 +2622,7 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
         MessageSignature messagesignature = message.signature();
 
         if (messagesignature != null) {
-            this.messageSignatureCache.push(message.signedBody(), message.signature());
+            this.messageSignatureCache.push(message);
             LastSeenMessagesValidator lastseenmessagesvalidator = this.lastSeenMessages;
             int i;
 
@@ -2766,6 +2768,29 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
 
                     @Override
                     public void onInteraction(InteractionHand hand, Vec3 pos) {
+                        org.bukkit.entity.Entity bukkitEntity = entity.getBukkitEntity();
+                        if(hand == InteractionHand.MAIN_HAND && ServerGamePacketListenerImpl.this.getCraftPlayer().getInventory().getItemInMainHand().isCustom()){
+                            CustomItem customItem = ServerGamePacketListenerImpl.this.getCraftPlayer().getInventory().getItemInMainHand().toCustomItem();
+                            if(customItem.getBehavior() != null) customItem.getBehavior().onInteractAtEntity(new PlayerInteractAtEntityEvent(ServerGamePacketListenerImpl.this.getCraftPlayer(), entity.getBukkitEntity(), new org.bukkit.util.Vector(pos.x, pos.y, pos.z), EquipmentSlot.HAND));
+                        } else if (hand == InteractionHand.OFF_HAND && ServerGamePacketListenerImpl.this.getCraftPlayer().getInventory().getItemInOffHand().isCustom()) {
+                            CustomItem customItem = ServerGamePacketListenerImpl.this.getCraftPlayer().getInventory().getItemInOffHand().toCustomItem();
+                            if(customItem.getBehavior() != null) customItem.getBehavior().onInteractAtEntity(new PlayerInteractAtEntityEvent(ServerGamePacketListenerImpl.this.getCraftPlayer(), entity.getBukkitEntity(), new org.bukkit.util.Vector(pos.x, pos.y, pos.z), EquipmentSlot.OFF_HAND));
+                        }
+                        if (bukkitEntity.isCustom()) {
+                            CustomEntity customEntity = bukkitEntity.toCustom();
+                            if (customEntity != null) customEntity.getBehavior().interactionAtEntity(new PlayerInteractAtEntityEvent(ServerGamePacketListenerImpl.this.getCraftPlayer(), entity.getBukkitEntity(), new org.bukkit.util.Vector(pos.x, pos.y, pos.z), (hand == InteractionHand.OFF_HAND) ? EquipmentSlot.OFF_HAND : EquipmentSlot.HAND));
+                        }
+
+                        if (bukkitEntity.getType() == EntityType.INTERACTION) {
+                            if (!bukkitEntity.isInsideVehicle()) return;
+                            org.bukkit.entity.Entity vehicle = bukkitEntity.getVehicle();
+
+                            if (vehicle.isCustom()) {
+                                CustomEntity customEntity = vehicle.toCustom();
+                                if (customEntity != null) customEntity.getBehavior().interactionAtHitBox(new PlayerInteractAtEntityEvent(ServerGamePacketListenerImpl.this.getCraftPlayer(), entity.getBukkitEntity(), new org.bukkit.util.Vector(pos.x, pos.y, pos.z), (hand == InteractionHand.OFF_HAND) ? EquipmentSlot.OFF_HAND : EquipmentSlot.HAND));
+                            }
+                        }
+
                         this.performInteraction(hand, (entityplayer, entity1, enumhand1) -> {
                             return entity1.interactAt(entityplayer, pos, enumhand1);
                         }, new PlayerInteractAtEntityEvent(ServerGamePacketListenerImpl.this.getCraftPlayer(), entity.getBukkitEntity(), new org.bukkit.util.Vector(pos.x, pos.y, pos.z), (hand == InteractionHand.OFF_HAND) ? EquipmentSlot.OFF_HAND : EquipmentSlot.HAND)); // CraftBukkit
@@ -3109,6 +3134,18 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
                         event.setCancelled(cancelled);
                         AbstractContainerMenu oldContainer = this.player.containerMenu; // SPIGOT-1224
                         this.cserver.getPluginManager().callEvent(event);
+
+                        if(event.getCursor().isCustom()){
+                            CustomItem customItem = event.getCursor().toCustomItem();
+
+                            if(customItem.getBehavior() != null) customItem.getBehavior().onInventoryClickWithCustomItem(event);
+                        }
+                        if(event.getCurrentItem() != null && event.getCurrentItem().isCustom()){
+                            CustomItem customItem = event.getCurrentItem().toCustomItem();
+
+                            if(customItem.getBehavior() != null) customItem.getBehavior().onInventoryClickAtCustomItem(event);
+                        }
+
                         if (this.player.containerMenu != oldContainer) {
                             return;
                         }
@@ -3487,9 +3524,10 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
         this.chatSession = session;
         this.hasLoggedExpiry = false; // Paper
         this.signedMessageDecoder = session.createMessageDecoder(this.player.getUUID());
-        this.chatMessageChain.append(() -> {
+        this.chatMessageChain.append((executor) -> {
             this.player.setChatSession(session);
             this.server.getPlayerList().broadcastAll(new ClientboundPlayerInfoUpdatePacket(EnumSet.of(ClientboundPlayerInfoUpdatePacket.Action.INITIALIZE_CHAT), List.of(this.player)), this.player); // Paper
+            return CompletableFuture.completedFuture((Object) null);
         });
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/item/ItemEntity.java b/src/main/java/net/minecraft/world/entity/item/ItemEntity.java
index a39db702063887cf530f272deaf4f334047cc7d4..b09e6b08cad89040446673a806acc3193251c29a 100644
--- a/src/main/java/net/minecraft/world/entity/item/ItemEntity.java
+++ b/src/main/java/net/minecraft/world/entity/item/ItemEntity.java
@@ -37,6 +37,7 @@ import org.bukkit.event.entity.EntityPickupItemEvent;
 import org.bukkit.event.player.PlayerPickupItemEvent;
 // CraftBukkit end
 import org.bukkit.event.player.PlayerAttemptPickupItemEvent; // Paper
+import org.ospaindustries.item.CustomItem;
 
 public class ItemEntity extends Entity implements TraceableEntity {
 
@@ -50,8 +51,6 @@ public class ItemEntity extends Entity implements TraceableEntity {
     @Nullable
     public UUID thrower;
     @Nullable
-    private Entity cachedThrower;
-    @Nullable
     public UUID target;
     public final float bobOffs;
     private int lastTick = MinecraftServer.currentTick - 1; // CraftBukkit
@@ -99,33 +98,17 @@ public class ItemEntity extends Entity implements TraceableEntity {
     @Nullable
     @Override
     public Entity getOwner() {
-        if (this.cachedThrower != null && !this.cachedThrower.isRemoved()) {
-            return this.cachedThrower;
-        } else {
-            if (this.thrower != null) {
-                Level world = this.level();
+        if (this.thrower != null) {
+            Level world = this.level();
 
-                if (world instanceof ServerLevel) {
-                    ServerLevel worldserver = (ServerLevel) world;
+            if (world instanceof ServerLevel) {
+                ServerLevel worldserver = (ServerLevel) world;
 
-                    this.cachedThrower = worldserver.getEntity(this.thrower);
-                    return this.cachedThrower;
-                }
+                return worldserver.getEntity(this.thrower);
             }
-
-            return null;
-        }
-    }
-
-    @Override
-    public void restoreFrom(Entity original) {
-        super.restoreFrom(original);
-        if (original instanceof ItemEntity) {
-            ItemEntity entityitem = (ItemEntity) original;
-
-            this.cachedThrower = entityitem.cachedThrower;
         }
 
+        return null;
     }
 
     @Override
@@ -428,7 +411,6 @@ public class ItemEntity extends Entity implements TraceableEntity {
 
         if (nbt.hasUUID("Thrower")) {
             this.thrower = nbt.getUUID("Thrower");
-            this.cachedThrower = null;
         }
 
         // Paper start
@@ -500,6 +482,13 @@ public class ItemEntity extends Entity implements TraceableEntity {
                 EntityPickupItemEvent entityEvent = new EntityPickupItemEvent((Player) player.getBukkitEntity(), (org.bukkit.entity.Item) this.getBukkitEntity(), remaining);
                 entityEvent.setCancelled(!entityEvent.getEntity().getCanPickupItems());
                 this.level().getCraftServer().getPluginManager().callEvent(entityEvent);
+
+                if(entityEvent.getItem().getItemStack().isCustom()){
+                    CustomItem customItem = entityEvent.getItem().getItemStack().toCustomItem();
+
+                    if(customItem.getBehavior() != null) customItem.getBehavior().onPickup(entityEvent);
+                }
+
                 if (entityEvent.isCancelled()) {
                     itemstack.setCount(i); // SPIGOT-5294 - restore count
                     return;
@@ -582,9 +571,8 @@ public class ItemEntity extends Entity implements TraceableEntity {
         this.target = owner;
     }
 
-    public void setThrower(Entity thrower) {
-        this.thrower = thrower.getUUID();
-        this.cachedThrower = thrower;
+    public void setThrower(@Nullable UUID thrower) {
+        this.thrower = thrower;
     }
 
     public int getAge() {
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 3e597833b57377b855505b8a0f2744801c791f90..f03a128b4651b2b4976e45dff203e68ae2bb0fc7 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -39,6 +39,7 @@ import net.minecraft.network.syncher.SynchedEntityData;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.server.network.ServerGamePacketListenerImpl;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
@@ -73,12 +74,16 @@ import net.minecraft.world.entity.TamableAnimal;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.animal.Parrot;
+import net.minecraft.world.entity.animal.Pig;
 import net.minecraft.world.entity.animal.horse.AbstractHorse;
 import net.minecraft.world.entity.boss.EnderDragonPart;
 import net.minecraft.world.entity.decoration.ArmorStand;
 import net.minecraft.world.entity.item.ItemEntity;
+import net.minecraft.world.entity.monster.Strider;
 import net.minecraft.world.entity.monster.warden.WardenSpawnTracker;
 import net.minecraft.world.entity.projectile.FishingHook;
+import net.minecraft.world.entity.vehicle.AbstractMinecart;
+import net.minecraft.world.entity.vehicle.Boat;
 import net.minecraft.world.food.FoodData;
 import net.minecraft.world.inventory.AbstractContainerMenu;
 import net.minecraft.world.inventory.ClickAction;
@@ -111,6 +116,9 @@ import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.scores.PlayerTeam;
 import net.minecraft.world.scores.Scoreboard;
+import org.bukkit.event.player.PlayerInteractAtEntityEvent;
+import org.ospaindustries.entity.CustomEntity;
+import org.ospaindustries.item.CustomItem;
 import org.slf4j.Logger;
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
@@ -140,6 +148,7 @@ public abstract class Player extends LivingEntity {
     public static final EntityDimensions STANDING_DIMENSIONS = EntityDimensions.scalable(0.6F, 1.8F);
     // CraftBukkit - decompile error
     private static final Map<Pose, EntityDimensions> POSES = ImmutableMap.<Pose, EntityDimensions>builder().put(Pose.STANDING, Player.STANDING_DIMENSIONS).put(Pose.SLEEPING, Player.SLEEPING_DIMENSIONS).put(Pose.FALL_FLYING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SWIMMING, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.SPIN_ATTACK, EntityDimensions.scalable(0.6F, 0.6F)).put(Pose.CROUCHING, EntityDimensions.scalable(0.6F, 1.5F)).put(Pose.DYING, EntityDimensions.fixed(0.2F, 0.2F)).build();
+    private static final int FLY_ACHIEVEMENT_SPEED = 25;
     private static final EntityDataAccessor<Float> DATA_PLAYER_ABSORPTION_ID = SynchedEntityData.defineId(Player.class, EntityDataSerializers.FLOAT);
     private static final EntityDataAccessor<Integer> DATA_SCORE_ID = SynchedEntityData.defineId(Player.class, EntityDataSerializers.INT);
     public static final EntityDataAccessor<Byte> DATA_PLAYER_MODE_CUSTOMISATION = SynchedEntityData.defineId(Player.class, EntityDataSerializers.BYTE);
@@ -317,11 +326,6 @@ public abstract class Player extends LivingEntity {
         this.updatePlayerPose();
     }
 
-    @Override
-    protected float getMaxHeadRotationRelativeToBody() {
-        return this.isBlocking() ? 15.0F : super.getMaxHeadRotationRelativeToBody();
-    }
-
     public boolean isSecondaryUseActive() {
         return this.isShiftKeyDown();
     }
@@ -436,7 +440,7 @@ public abstract class Player extends LivingEntity {
 
     @Override
     public int getPortalWaitTime() {
-        return Math.max(1, this.level().getGameRules().getInt(this.abilities.invulnerable ? GameRules.RULE_PLAYERS_NETHER_PORTAL_CREATIVE_DELAY : GameRules.RULE_PLAYERS_NETHER_PORTAL_DEFAULT_DELAY));
+        return this.abilities.invulnerable ? 1 : 80;
     }
 
     @Override
@@ -533,9 +537,14 @@ public abstract class Player extends LivingEntity {
         }
         {
             // CraftBukkit end
+            double d0 = this.getX();
+            double d1 = this.getY();
+            double d2 = this.getZ();
+
             super.rideTick();
             this.oBob = this.bob;
             this.bob = 0.0F;
+            this.checkRidingStatistics(this.getX() - d0, this.getY() - d1, this.getZ() - d2);
         }
     }
 
@@ -740,7 +749,7 @@ public abstract class Player extends LivingEntity {
 
             entityitem.setPickUpDelay(40);
             if (flag1) {
-                entityitem.setThrower(this);
+                entityitem.setThrower(this.getUUID());
             }
 
             float f;
@@ -772,6 +781,12 @@ public abstract class Player extends LivingEntity {
             PlayerDropItemEvent event = new PlayerDropItemEvent(player, drop);
             this.level().getCraftServer().getPluginManager().callEvent(event);
 
+            if(drop.getItemStack().isCustom()){
+                CustomItem customItem = drop.getItemStack().toCustomItem();
+
+                if(customItem.getBehavior() != null) customItem.getBehavior().onDropItem(event);
+            }
+
             if (event.isCancelled()) {
                 org.bukkit.inventory.ItemStack cur = player.getInventory().getItemInHand();
                 if (flag1 && (cur == null || cur.getAmount() == 0)) {
@@ -1249,6 +1264,18 @@ public abstract class Player extends LivingEntity {
             willAttack
         );
 
+        org.bukkit.entity.Entity bukkitEntity = target.getBukkitEntity();
+
+        if (bukkitEntity.getType() == org.bukkit.entity.EntityType.INTERACTION) {
+            if (!bukkitEntity.isInsideVehicle()) return;
+            org.bukkit.entity.Entity vehicle = bukkitEntity.getVehicle();
+
+            if (vehicle.isCustom()) {
+                CustomEntity customEntity = vehicle.toCustom();
+                if (customEntity != null) customEntity.getBehavior().damageHitbox(playerAttackEntityEvent);
+            }
+        }
+
         if (playerAttackEntityEvent.callEvent() && willAttack) { // Logic moved to willAttack local variable.
             {
         // Paper end
@@ -1272,6 +1299,10 @@ public abstract class Player extends LivingEntity {
                     byte b0 = 0;
                     int i = b0 + EnchantmentHelper.getKnockbackBonus(this);
 
+                    if(this.getMainHandItem().getBukkitStack().isCustom()){
+                        i += this.getMainHandItem().getBukkitStack().toCustomItem().getKnockbackBonus();
+                    }
+
                     if (this.isSprinting() && flag) {
                         sendSoundEffect(this, this.getX(), this.getY(), this.getZ(), SoundEvents.PLAYER_ATTACK_KNOCKBACK, this.getSoundSource(), 1.0F, 1.0F); // Paper - send while respecting visibility
                         ++i;
@@ -1608,7 +1639,7 @@ public abstract class Player extends LivingEntity {
 
     public void triggerRecipeCrafted(RecipeHolder<?> recipe, List<ItemStack> ingredients) {}
 
-    public void awardRecipesByKey(List<ResourceLocation> recipes) {}
+    public void awardRecipesByKey(ResourceLocation[] ids) {}
 
     public int resetRecipes(Collection<RecipeHolder<?>> recipes) {
         return 0;
@@ -1628,25 +1659,28 @@ public abstract class Player extends LivingEntity {
 
     @Override
     public void travel(Vec3 movementInput) {
-        double d0;
+        double d0 = this.getX();
+        double d1 = this.getY();
+        double d2 = this.getZ();
+        double d3;
 
         if (this.isSwimming() && !this.isPassenger()) {
-            d0 = this.getLookAngle().y;
-            double d1 = d0 < -0.2D ? 0.085D : 0.06D;
+            d3 = this.getLookAngle().y;
+            double d4 = d3 < -0.2D ? 0.085D : 0.06D;
 
-            if (d0 <= 0.0D || this.jumping || !this.level().getBlockState(BlockPos.containing(this.getX(), this.getY() + 1.0D - 0.1D, this.getZ())).getFluidState().isEmpty()) {
+            if (d3 <= 0.0D || this.jumping || !this.level().getBlockState(BlockPos.containing(this.getX(), this.getY() + 1.0D - 0.1D, this.getZ())).getFluidState().isEmpty()) {
                 Vec3 vec3d1 = this.getDeltaMovement();
 
-                this.setDeltaMovement(vec3d1.add(0.0D, (d0 - vec3d1.y) * d1, 0.0D));
+                this.setDeltaMovement(vec3d1.add(0.0D, (d3 - vec3d1.y) * d4, 0.0D));
             }
         }
 
         if (this.abilities.flying && !this.isPassenger()) {
-            d0 = this.getDeltaMovement().y;
+            d3 = this.getDeltaMovement().y;
             super.travel(movementInput);
             Vec3 vec3d2 = this.getDeltaMovement();
 
-            this.setDeltaMovement(vec3d2.x, d0 * 0.6D, vec3d2.z);
+            this.setDeltaMovement(vec3d2.x, d3 * 0.6D, vec3d2.z);
             this.resetFallDistance();
             // CraftBukkit start
             if (this.getSharedFlag(7) && !org.bukkit.craftbukkit.event.CraftEventFactory.callToggleGlideEvent(this, false).isCancelled()) {
@@ -1657,6 +1691,7 @@ public abstract class Player extends LivingEntity {
             super.travel(movementInput);
         }
 
+        this.checkMovementStatistics(this.getX() - d0, this.getY() - d1, this.getZ() - d2);
     }
 
     @Override
@@ -1678,6 +1713,82 @@ public abstract class Player extends LivingEntity {
         return (float) this.getAttributeValue(Attributes.MOVEMENT_SPEED);
     }
 
+    public void checkMovementStatistics(double dx, double dy, double dz) {
+        if (!this.isPassenger()) {
+            int i;
+
+            if (this.isSwimming()) {
+                i = Math.round((float) Math.sqrt(dx * dx + dy * dy + dz * dz) * 100.0F);
+                if (i > 0) {
+                    this.awardStat(Stats.SWIM_ONE_CM, i);
+                    this.causeFoodExhaustion(this.level().spigotConfig.swimMultiplier * (float) i * 0.01F, EntityExhaustionEvent.ExhaustionReason.SWIM); // CraftBukkit - EntityExhaustionEvent // Spigot
+                }
+            } else if (this.isEyeInFluid(FluidTags.WATER)) {
+                i = Math.round((float) Math.sqrt(dx * dx + dy * dy + dz * dz) * 100.0F);
+                if (i > 0) {
+                    this.awardStat(Stats.WALK_UNDER_WATER_ONE_CM, i);
+                    this.causeFoodExhaustion(this.level().spigotConfig.swimMultiplier * (float) i * 0.01F, EntityExhaustionEvent.ExhaustionReason.WALK_UNDERWATER); // CraftBukkit - EntityExhaustionEvent // Spigot
+                }
+            } else if (this.isInWater()) {
+                i = Math.round((float) Math.sqrt(dx * dx + dz * dz) * 100.0F);
+                if (i > 0) {
+                    this.awardStat(Stats.WALK_ON_WATER_ONE_CM, i);
+                    this.causeFoodExhaustion(this.level().spigotConfig.swimMultiplier * (float) i * 0.01F, EntityExhaustionEvent.ExhaustionReason.WALK_ON_WATER); // CraftBukkit - EntityExhaustionEvent // Spigot
+                }
+            } else if (this.onClimbable()) {
+                if (dy > 0.0D) {
+                    this.awardStat(Stats.CLIMB_ONE_CM, (int) Math.round(dy * 100.0D));
+                }
+            } else if (this.onGround()) {
+                i = Math.round((float) Math.sqrt(dx * dx + dz * dz) * 100.0F);
+                if (i > 0) {
+                    if (this.isSprinting()) {
+                        this.awardStat(Stats.SPRINT_ONE_CM, i);
+                        this.causeFoodExhaustion(this.level().spigotConfig.sprintMultiplier * (float) i * 0.01F, EntityExhaustionEvent.ExhaustionReason.SPRINT); // CraftBukkit - EntityExhaustionEvent // Spigot
+                    } else if (this.isCrouching()) {
+                        this.awardStat(Stats.CROUCH_ONE_CM, i);
+                        this.causeFoodExhaustion(this.level().spigotConfig.otherMultiplier * (float) i * 0.01F, EntityExhaustionEvent.ExhaustionReason.CROUCH); // CraftBukkit - EntityExhaustionEvent // Spigot
+                    } else {
+                        this.awardStat(Stats.WALK_ONE_CM, i);
+                        this.causeFoodExhaustion(this.level().spigotConfig.otherMultiplier * (float) i * 0.01F, EntityExhaustionEvent.ExhaustionReason.WALK); // CraftBukkit - EntityExhaustionEvent // Spigot
+                    }
+                }
+            } else if (this.isFallFlying()) {
+                i = Math.round((float) Math.sqrt(dx * dx + dy * dy + dz * dz) * 100.0F);
+                this.awardStat(Stats.AVIATE_ONE_CM, i);
+            } else {
+                i = Math.round((float) Math.sqrt(dx * dx + dz * dz) * 100.0F);
+                if (i > 25) {
+                    this.awardStat(Stats.FLY_ONE_CM, i);
+                }
+            }
+
+        }
+    }
+
+    private void checkRidingStatistics(double dx, double dy, double dz) {
+        if (this.isPassenger()) {
+            int i = Math.round((float) Math.sqrt(dx * dx + dy * dy + dz * dz) * 100.0F);
+
+            if (i > 0) {
+                Entity entity = this.getVehicle();
+
+                if (entity instanceof AbstractMinecart) {
+                    this.awardStat(Stats.MINECART_ONE_CM, i);
+                } else if (entity instanceof Boat) {
+                    this.awardStat(Stats.BOAT_ONE_CM, i);
+                } else if (entity instanceof Pig) {
+                    this.awardStat(Stats.PIG_ONE_CM, i);
+                } else if (entity instanceof AbstractHorse) {
+                    this.awardStat(Stats.HORSE_ONE_CM, i);
+                } else if (entity instanceof Strider) {
+                    this.awardStat(Stats.STRIDER_ONE_CM, i);
+                }
+            }
+        }
+
+    }
+
     @Override
     public boolean causeFallDamage(float fallDistance, float damageMultiplier, DamageSource damageSource) {
         if (this.abilities.mayfly && !this.flyingFallDamage.toBooleanOrElse(false)) { // Paper - flying fall damage
@@ -1833,7 +1944,7 @@ public abstract class Player extends LivingEntity {
     }
 
     public int getXpNeededForNextLevel() {
-        return this.experienceLevel >= 30 ? 112 + (this.experienceLevel - 30) * 9 : (this.experienceLevel >= 15 ? 37 + (this.experienceLevel - 15) * 5 : 7 + this.experienceLevel * 2); // Paper - diff on change
+        return this.experienceLevel >= 30 ? 112 + (this.experienceLevel - 30) * 9 : (this.experienceLevel >= 15 ? 37 + (this.experienceLevel - 15) * 5 : 7 + this.experienceLevel * 2);
     }
     // Paper start - send SoundEffect to everyone who can see fromEntity
     private static void sendSoundEffect(Player fromEntity, double x, double y, double z, SoundEvent soundEffect, SoundSource soundCategory, float volume, float pitch) {
@@ -2349,30 +2460,6 @@ public abstract class Player extends LivingEntity {
         return this.abilities.flying && !this.isPassenger() ? (this.isSprinting() ? this.abilities.getFlyingSpeed() * 2.0F : this.abilities.getFlyingSpeed()) : (this.isSprinting() ? 0.025999999F : 0.02F);
     }
 
-    public static boolean isValidUsername(String name) {
-        // Paper start
-        if (name == null || name.isEmpty() || name.length() > 16) {
-            return false;
-        }
-
-        for (int i = 0, len = name.length(); i < len; ++i) {
-            char c = name.charAt(i);
-
-            if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9') || (c == '_' || c == '.')) {
-                continue;
-            }
-
-            return false;
-        }
-
-        return true;
-        // Paper end
-    }
-
-    public static float getPickRange(boolean creative) {
-        return creative ? 5.0F : 4.5F;
-    }
-
     public static enum BedSleepingProblem {
 
         NOT_POSSIBLE_HERE, NOT_POSSIBLE_NOW(Component.translatable("block.minecraft.bed.no_sleep")), TOO_FAR_AWAY(Component.translatable("block.minecraft.bed.too_far_away")), OBSTRUCTED(Component.translatable("block.minecraft.bed.obstructed")), OTHER_PROBLEM, NOT_SAFE(Component.translatable("block.minecraft.bed.not_safe"));
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index f67ec3f5f4b7e2f678609f2387cc8afa2adce161..d38b6db79b4a3c4309d2d8bd4526b1eda75eba15 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -5,6 +5,7 @@ import com.google.common.base.Functions;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.Lists;
 import com.mojang.datafixers.util.Either;
+import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 import java.util.ArrayList;
@@ -45,7 +46,6 @@ import net.minecraft.world.entity.projectile.FireworkRocketEntity;
 import net.minecraft.world.entity.raid.Raid;
 import net.minecraft.world.inventory.AbstractContainerMenu;
 import net.minecraft.world.inventory.MerchantMenu;
-import net.minecraft.world.inventory.RecipeBookType;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.context.UseOnContext;
@@ -65,6 +65,8 @@ import net.minecraft.world.phys.Vec3;
 import org.bukkit.Bukkit;
 import org.bukkit.Location;
 import org.bukkit.Material;
+import org.bukkit.NamespacedKey;
+import org.bukkit.Server;
 import org.bukkit.Statistic.Type;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
@@ -91,6 +93,7 @@ import org.bukkit.craftbukkit.inventory.CraftInventoryCrafting;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.inventory.CraftMetaBook;
 import org.bukkit.craftbukkit.potion.CraftPotionUtil;
+import org.bukkit.craftbukkit.scheduler.MinecraftInternalPlugin;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.craftbukkit.util.CraftVector;
@@ -219,7 +222,6 @@ import org.bukkit.event.player.PlayerItemBreakEvent;
 import org.bukkit.event.player.PlayerItemMendEvent;
 import org.bukkit.event.player.PlayerLevelChangeEvent;
 import org.bukkit.event.player.PlayerRecipeBookClickEvent;
-import org.bukkit.event.player.PlayerRecipeBookSettingsChangeEvent;
 import org.bukkit.event.player.PlayerRecipeDiscoverEvent;
 import org.bukkit.event.player.PlayerShearEntityEvent;
 import org.bukkit.event.player.PlayerSignOpenEvent;
@@ -241,6 +243,9 @@ import org.bukkit.inventory.Recipe;
 import org.bukkit.inventory.meta.BookMeta;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.util.Vector;
+import org.ospaindustries.entity.CustomEntity;
+import org.ospaindustries.item.CustomItem;
+import org.ospaindustries.utils.BreakBlockRunnable;
 
 public class CraftEventFactory {
     public static org.bukkit.block.Block blockDamage; // For use in EntityDamageByBlockEvent
@@ -590,7 +595,10 @@ public class CraftEventFactory {
         }
         // Paper end
         craftServer.getPluginManager().callEvent(event);
-
+        if(event.getItem() != null && event.getItem().isCustom()){
+            CustomItem customItem = event.getItem().toCustomItem();
+            if(customItem.getBehavior() != null) customItem.getBehavior().onInteract(event);
+        }
         return event;
     }
 
@@ -658,6 +666,12 @@ public class CraftEventFactory {
         BlockDamageEvent event = new BlockDamageEvent(player, blockClicked, CraftBlock.notchToBlockFace(direction), itemInHand, instaBreak); // Paper - Expose BlockFace
         player.getServer().getPluginManager().callEvent(event);
 
+        if (blockClicked.isCustom()) {
+            new BreakBlockRunnable(blockClicked.toCustom(), who.getBukkitEntity()).runTaskTimer(new MinecraftInternalPlugin(), 0, 1);
+
+            blockClicked.toCustom().getBehavior().startBreaking(event);
+        }
+
         return event;
     }
 
@@ -670,6 +684,17 @@ public class CraftEventFactory {
         BlockDamageAbortEvent event = new BlockDamageAbortEvent(player, blockClicked, itemInHand);
         player.getServer().getPluginManager().callEvent(event);
 
+        if (!blockClicked.isCustom()) return event;
+
+        if (BreakBlockRunnable.breakBlockRunnables.containsKey(blockClicked.getLocation())) {
+            BreakBlockRunnable runnable = BreakBlockRunnable.breakBlockRunnables.get(blockClicked.getLocation());
+
+            blockClicked.toCustom().getBehavior().stopBreaking(event);
+
+            BreakBlockRunnable.breakBlockRunnables.remove(blockClicked.getLocation());
+            runnable.cancel();
+        }
+
         return event;
     }
 
@@ -715,29 +740,14 @@ public class CraftEventFactory {
                 return true;
             }
             event = CraftEventFactory.callLightningStrikeEvent((LightningStrike) entity.getBukkitEntity(), cause);
-        } else if (!(entity instanceof ServerPlayer)) {
-            event = CraftEventFactory.callEntitySpawnEvent(entity);
-        }
-
-        if (event != null && (event.isCancelled() || entity.isRemoved())) {
-            Entity vehicle = entity.getVehicle();
-            if (vehicle != null) {
-                vehicle.discard();
-            }
-            for (Entity passenger : entity.getIndirectPassengers()) {
-                passenger.discard();
-            }
-            entity.discard();
-            return false;
-        }
-
-        // Spigot start - SPIGOT-7523: Merge after spawn event and only merge if the event was not cancelled (gets checked above)
-        if (entity instanceof net.minecraft.world.entity.ExperienceOrb xp) {
+        // Spigot start
+        } else if (entity instanceof net.minecraft.world.entity.ExperienceOrb) {
+            net.minecraft.world.entity.ExperienceOrb xp = (net.minecraft.world.entity.ExperienceOrb) entity;
             double radius = world.spigotConfig.expMerge;
             // Paper start - Call EntitySpawnEvent for ExperienceOrb entities.
             event = CraftEventFactory.callEntitySpawnEvent(entity);
             if (radius > 0 && !event.isCancelled() && !entity.isRemoved()) {
-            // Paper end
+                // Paper end
                 // Paper start - Maximum exp value when merging - Whole section has been tweaked, see comments for specifics
                 final int maxValue = world.paperConfig().entities.behavior.experienceMergeMaxValue;
                 final boolean mergeUnconditionally = world.paperConfig().entities.behavior.experienceMergeMaxValue <= 0;
@@ -745,7 +755,8 @@ public class CraftEventFactory {
 
                 List<Entity> entities = world.getEntities(entity, entity.getBoundingBox().inflate(radius, radius, radius));
                 for (Entity e : entities) {
-                    if (e instanceof net.minecraft.world.entity.ExperienceOrb loopItem) {
+                    if (e instanceof net.minecraft.world.entity.ExperienceOrb) {
+                        net.minecraft.world.entity.ExperienceOrb loopItem = (net.minecraft.world.entity.ExperienceOrb) e;
                         // Paper start
                         if (!loopItem.isRemoved() && !(maxValue > 0 && loopItem.value >= maxValue) && new com.destroystokyo.paper.event.entity.ExperienceOrbMergeEvent((org.bukkit.entity.ExperienceOrb) entity.getBukkitEntity(), (org.bukkit.entity.ExperienceOrb) loopItem.getBukkitEntity()).callEvent()) { // Paper - ExperienceOrbMergeEvent
                             long newTotal = (long)xp.value + (long)loopItem.value;
@@ -760,10 +771,24 @@ public class CraftEventFactory {
                         }
                     }
                 }
+                } // Paper end - End iteration skip check - All tweaking ends here
             }
-            } // Paper end - End iteration skip check - All tweaking ends here
-        }
         // Spigot end
+        } else if (!(entity instanceof ServerPlayer)) {
+            event = CraftEventFactory.callEntitySpawnEvent(entity);
+        }
+
+        if (event != null && (event.isCancelled() || entity.isRemoved())) {
+            Entity vehicle = entity.getVehicle();
+            if (vehicle != null) {
+                vehicle.discard();
+            }
+            for (Entity passenger : entity.getIndirectPassengers()) {
+                passenger.discard();
+            }
+            entity.discard();
+            return false;
+        }
 
         return true;
     }
@@ -939,25 +964,30 @@ public class CraftEventFactory {
     }
 
     public static EntityDeathEvent callEntityDeathEvent(net.minecraft.world.entity.LivingEntity victim) {
-        return CraftEventFactory.callEntityDeathEvent(victim, new ArrayList<>(0)); // Paper
+        return CraftEventFactory.callEntityDeathEvent(victim, new ArrayList<org.bukkit.inventory.ItemStack>(0));
     }
 
-    public static EntityDeathEvent callEntityDeathEvent(net.minecraft.world.entity.LivingEntity victim, List<Entity.DefaultDrop> drops) { // Paper
+    public static EntityDeathEvent callEntityDeathEvent(net.minecraft.world.entity.LivingEntity victim, List<org.bukkit.inventory.ItemStack> drops) {
         // Paper start
         return CraftEventFactory.callEntityDeathEvent(victim, drops, com.google.common.util.concurrent.Runnables.doNothing());
     }
-    private static java.util.function.Function<org.bukkit.inventory.ItemStack, Entity.DefaultDrop> FROM_FUNCTION = stack -> {
-        if (stack == null) return null;
-        return new Entity.DefaultDrop(CraftMagicNumbers.getItem(stack.getType()), stack, null);
-    };
-    public static EntityDeathEvent callEntityDeathEvent(net.minecraft.world.entity.LivingEntity victim, List<Entity.DefaultDrop> drops, Runnable lootCheck) { // Paper
+    public static EntityDeathEvent callEntityDeathEvent(net.minecraft.world.entity.LivingEntity victim, List<org.bukkit.inventory.ItemStack> drops, Runnable lootCheck) {
         // Paper end
         CraftLivingEntity entity = (CraftLivingEntity) victim.getBukkitEntity();
-        EntityDeathEvent event = new EntityDeathEvent(entity, new io.papermc.paper.util.TransformingRandomAccessList<>(drops, Entity.DefaultDrop::stack, FROM_FUNCTION), victim.getExpReward()); // Paper
+        EntityDeathEvent event = new EntityDeathEvent(entity, drops, victim.getExpReward());
         populateFields(victim, event); // Paper - make cancellable
         CraftWorld world = (CraftWorld) entity.getWorld();
         Bukkit.getServer().getPluginManager().callEvent(event);
 
+        if (entity.isCustom()) {
+            CustomEntity customEntity = entity.toCustom();
+            if (customEntity != null) {
+                customEntity.getBehavior().death(event);
+
+                customEntity.remove(true);
+            }
+        }
+
         // Paper start - make cancellable
         if (event.isCancelled()) {
             return event;
@@ -967,23 +997,19 @@ public class CraftEventFactory {
         victim.expToDrop = event.getDroppedExp();
         lootCheck.run(); // Paper - advancement triggers before destroying items
 
-        // Paper start
-        for (Entity.DefaultDrop drop : drops) {
-            if (drop == null) continue;;
-            final org.bukkit.inventory.ItemStack stack = drop.stack();
-            // Paper end
+        for (org.bukkit.inventory.ItemStack stack : event.getDrops()) {
             if (stack == null || stack.getType() == Material.AIR || stack.getAmount() == 0) continue;
 
-            drop.runConsumer(world, entity.getLocation()); // Paper
+            world.dropItem(entity.getLocation(), stack); // Paper - note: dropItem already clones due to this being bukkit -> NMS
             if (stack instanceof CraftItemStack) stack.setAmount(0); // Paper - destroy this item - if this ever leaks due to game bugs, ensure it doesn't dupe, but don't nuke bukkit stacks of manually added items
         }
 
         return event;
     }
 
-    public static PlayerDeathEvent callPlayerDeathEvent(ServerPlayer victim, List<Entity.DefaultDrop> drops, net.kyori.adventure.text.Component deathMessage, String stringDeathMessage, boolean keepInventory) { // Paper - Adventure & improve drops
+    public static PlayerDeathEvent callPlayerDeathEvent(ServerPlayer victim, List<org.bukkit.inventory.ItemStack> drops, net.kyori.adventure.text.Component deathMessage, String stringDeathMessage, boolean keepInventory) { // Paper - Adventure
         CraftPlayer entity = victim.getBukkitEntity();
-        PlayerDeathEvent event = new PlayerDeathEvent(entity, new io.papermc.paper.util.TransformingRandomAccessList<>(drops, Entity.DefaultDrop::stack, FROM_FUNCTION), victim.getExpReward(), 0, deathMessage, stringDeathMessage); // Paper - Adventure & improve drops
+        PlayerDeathEvent event = new PlayerDeathEvent(entity, drops, victim.getExpReward(), 0, deathMessage, stringDeathMessage); // Paper - Adventure
         event.setKeepInventory(keepInventory);
         event.setKeepLevel(victim.keepLevel); // SPIGOT-2222: pre-set keepLevel
         populateFields(victim, event); // Paper - make cancellable
@@ -1002,14 +1028,10 @@ public class CraftEventFactory {
         victim.expToDrop = event.getDroppedExp();
         victim.newExp = event.getNewExp();
 
-        // Paper start
-        for (Entity.DefaultDrop drop : drops) {
-            if (drop == null) continue;
-            final org.bukkit.inventory.ItemStack stack = drop.stack();
-            // Paper end
+        for (org.bukkit.inventory.ItemStack stack : event.getDrops()) {
             if (stack == null || stack.getType() == Material.AIR) continue;
 
-            drop.runConsumer(world, entity.getLocation()); // Paper
+            world.dropItem(entity.getLocation(), stack);
         }
 
         return event;
@@ -1073,6 +1095,12 @@ public class CraftEventFactory {
             }
             event.setCancelled(cancelled);
 
+            org.bukkit.entity.Entity bukkitEntity = entity.getBukkitEntity();
+            if (bukkitEntity.isCustom()) {
+                CustomEntity customEntity = bukkitEntity.toCustom();
+                if (customEntity != null) customEntity.getBehavior().damageEntity(event);
+            }
+
             CraftEventFactory.callEvent(event);
 
             if (!event.isCancelled()) {
@@ -1111,6 +1139,13 @@ public class CraftEventFactory {
             EntityDamageEvent event = new EntityDamageByBlockEvent(null, entity.getBukkitEntity(), DamageCause.VOID, modifiers, modifierFunctions);
             event.setCancelled(cancelled);
             CraftEventFactory.callEvent(event);
+
+            org.bukkit.entity.Entity bukkitEntity = entity.getBukkitEntity();
+            if (bukkitEntity.isCustom()) {
+                CustomEntity customEntity = bukkitEntity.toCustom();
+                if (customEntity != null) customEntity.getBehavior().damageEntity(event);
+            }
+
             if (!event.isCancelled()) {
                 event.getEntity().setLastDamageCause(event);
             } else {
@@ -1126,6 +1161,12 @@ public class CraftEventFactory {
             CraftEventFactory.callEvent(event);
             CraftEventFactory.blockDamage = damager; // SPIGOT-6639: Re-set blockDamage so that other entities which are also getting damaged have the right cause
 
+            org.bukkit.entity.Entity bukkitEntity = entity.getBukkitEntity();
+            if (bukkitEntity.isCustom()) {
+                CustomEntity customEntity = bukkitEntity.toCustom();
+                if (customEntity != null) customEntity.getBehavior().damageEntity(event);
+            }
+
             if (!event.isCancelled()) {
                 event.getEntity().setLastDamageCause(event);
             } else {
@@ -1153,6 +1194,12 @@ public class CraftEventFactory {
             CraftEventFactory.callEvent(event);
             CraftEventFactory.blockDamage = damager; // SPIGOT-6639: Re-set blockDamage so that other entities which are also getting damaged have the right cause
 
+            org.bukkit.entity.Entity bukkitEntity = entity.getBukkitEntity();
+            if (bukkitEntity.isCustom()) {
+                CustomEntity customEntity = bukkitEntity.toCustom();
+                if (customEntity != null) customEntity.getBehavior().damageEntity(event);
+            }
+
             if (!event.isCancelled()) {
                 event.getEntity().setLastDamageCause(event);
             } else {
@@ -1179,6 +1226,13 @@ public class CraftEventFactory {
             EntityDamageEvent event = new EntityDamageByEntityEvent(damager, entity.getBukkitEntity(), cause, modifiers, modifierFunctions, source.isCritical()); // Paper - add critical damage API
             event.setCancelled(cancelled);
             CraftEventFactory.callEvent(event);
+
+            org.bukkit.entity.Entity bukkitEntity = entity.getBukkitEntity();
+            if (bukkitEntity.isCustom()) {
+                CustomEntity customEntity = bukkitEntity.toCustom();
+                if (customEntity != null) customEntity.getBehavior().damageEntity(event);
+            }
+
             if (!event.isCancelled()) {
                 event.getEntity().setLastDamageCause(event);
             } else {
@@ -1253,6 +1307,12 @@ public class CraftEventFactory {
         event.setCancelled(cancelled);
         CraftEventFactory.callEvent(event);
 
+        org.bukkit.entity.Entity bukkitEntity = damagee.getBukkitEntity();
+        if (bukkitEntity.isCustom()) {
+            CustomEntity customEntity = bukkitEntity.toCustom();
+            if (customEntity != null) customEntity.getBehavior().damageEntity(event);
+        }
+
         if (!event.isCancelled()) {
             event.getEntity().setLastDamageCause(event);
         } else {
@@ -1649,10 +1709,11 @@ public class CraftEventFactory {
         return event;
     }
 
-    public static BlockIgniteEvent callBlockIgniteEvent(Level world, BlockPos blockposition, Explosion explosion) {
+    public static BlockIgniteEvent callBlockIgniteEvent(Level world, int x, int y, int z, Explosion explosion) {
+        org.bukkit.World bukkitWorld = world.getWorld();
         org.bukkit.entity.Entity igniter = explosion.source == null ? null : explosion.source.getBukkitEntity();
 
-        BlockIgniteEvent event = new BlockIgniteEvent(CraftBlock.at(world, blockposition), IgniteCause.EXPLOSION, igniter);
+        BlockIgniteEvent event = new BlockIgniteEvent(bukkitWorld.getBlockAt(x, y, z), IgniteCause.EXPLOSION, igniter);
         world.getCraftServer().getPluginManager().callEvent(event);
         return event;
     }
@@ -1699,11 +1760,6 @@ public class CraftEventFactory {
         return itemInHand;
     }
 
-    public static void callRecipeBookSettingsEvent(ServerPlayer player, RecipeBookType type, boolean open, boolean filter) {
-        PlayerRecipeBookSettingsChangeEvent.RecipeBookType bukkitType = PlayerRecipeBookSettingsChangeEvent.RecipeBookType.values()[type.ordinal()];
-        Bukkit.getPluginManager().callEvent(new PlayerRecipeBookSettingsChangeEvent(player.getBukkitEntity(), bukkitType, open, filter));
-    }
-
     // Paper start - drop leash variable
     public static PlayerUnleashEntityEvent callPlayerUnleashEntityEvent(Mob entity, net.minecraft.world.entity.player.Player player, InteractionHand enumhand, boolean dropLeash) {
         PlayerUnleashEntityEvent event = new PlayerUnleashEntityEvent(entity.getBukkitEntity(), (Player) player.getBukkitEntity(), CraftEquipmentSlot.getHand(enumhand), dropLeash);
