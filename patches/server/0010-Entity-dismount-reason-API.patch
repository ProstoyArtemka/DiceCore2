From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: DenaryDev <denaryplanet@gmail.com>
Date: Mon, 2 May 2022 02:19:37 +0500
Subject: [PATCH] Entity dismount reason API

Ported from EmpireCraft

diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 727cc7a5fd26ad081c1f53d48ea218b5a12d1da3..83829c8958bd92ea6033683b9e246dc8dba10164 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -865,6 +865,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
                                 if (!entity1.isRemoved() && entity1.hasPassenger(entity)) {
                                     return;
                                 }
+                                if (entity1.isRemoved()) entity.dismountReason = org.spigotmc.event.entity.EntityDismountEvent.DismountReason.DEAD_VEHICLE; // Sapphire
 
                                 entity.stopRiding();
                             }
@@ -1426,6 +1427,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
             } finally { timer.stopTiming(); }// Paper - EAR2 timings
             }
         } else {
+            if (passenger.isRemoved()) passenger.dismountReason = org.spigotmc.event.entity.EntityDismountEvent.DismountReason.DEAD; // Sapphire
             passenger.stopRiding();
         }
     }
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index c88e0aa5ee8a9c8d429d4dd2bab60343db3e1256..a5e2f3bee3a56292459f5032d5c27dc4bcc2a7ae 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -1751,10 +1751,11 @@ public class ServerPlayer extends Player {
 
     public void disconnect() {
         this.disconnected = true;
-        this.ejectPassengers();
+        this.ejectPassengers(org.spigotmc.event.entity.EntityDismountEvent.DismountReason.DISCONNECT); // Sapphire
 
         // Paper start - Workaround an issue where the vehicle doesn't track the passenger disconnection dismount.
         if (this.isPassenger() && this.getVehicle() instanceof ServerPlayer) {
+            this.dismountReason = org.spigotmc.event.entity.EntityDismountEvent.DismountReason.DISCONNECT; // Sapphire
             this.stopRiding();
         }
         // Paper end
@@ -1889,6 +1890,7 @@ public class ServerPlayer extends Player {
         ChunkPos chunkcoordintpair = new ChunkPos(BlockPos.containing(d0, d1, d2));
 
         worldserver.getChunkSource().addRegionTicket(TicketType.POST_TELEPORT, chunkcoordintpair, 1, this.getId());
+        this.dismountReason = org.spigotmc.event.entity.EntityDismountEvent.DismountReason.TELEPORT; // Sapphire
         this.stopRiding();
         if (this.isSleeping()) {
             this.stopSleepInBed(true, true);
@@ -1947,6 +1949,7 @@ public class ServerPlayer extends Player {
             this.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.CHANGE_GAME_MODE, (float) gameMode.getId()));
             if (gameMode == GameType.SPECTATOR) {
                 this.removeEntitiesOnShoulder();
+                this.dismountReason = org.spigotmc.event.entity.EntityDismountEvent.DismountReason.SPECTATE; // Sapphire
                 this.stopRiding();
             } else {
                 this.setCamera(this);
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index fff7ad7a45f310783ac96b44575ad3db13d537fa..e4066eb5e4e079760cf5fbb7a05f3b7496490885 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -626,6 +626,7 @@ public abstract class PlayerList {
 
             if (entity.hasExactlyOnePlayerPassenger()) {
                 PlayerList.LOGGER.debug("Removing player mount");
+                entityplayer.dismountReason = org.spigotmc.event.entity.EntityDismountEvent.DismountReason.DISCONNECT; // Sapphire
                 entityplayer.stopRiding();
                 entity.getPassengersAndSelf().forEach((entity1) -> {
                     // Paper start
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index c432dcb4ebc66b52f9f5965671675b253ce33029..30425cfcb477dc955b47b3d8d1d96682267f8017 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -588,6 +588,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         this.teleportTo(worldserver, null);
     }
     // Paper end - make end portalling safe
+    public org.spigotmc.event.entity.EntityDismountEvent.DismountReason dismountReason; // Sapphire
 
     public Entity(EntityType<?> type, Level world) {
         this.id = Entity.ENTITY_COUNTER.incrementAndGet();
@@ -848,6 +849,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         if (firstTick && this instanceof net.minecraft.world.entity.NeutralMob neutralMob) neutralMob.tickInitialPersistentAnger(level); // Paper - Update last hurt when ticking
         this.feetBlockState = null;
         if (this.isPassenger() && this.getVehicle().isRemoved()) {
+            this.dismountReason = org.spigotmc.event.entity.EntityDismountEvent.DismountReason.DEAD_VEHICLE; // Sapphire
             this.stopRiding();
         }
 
@@ -2873,6 +2875,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
                 }
                 // Spigot end
                 if (this.isPassenger()) {
+                    this.dismountReason = org.spigotmc.event.entity.EntityDismountEvent.DismountReason.DEAD_VEHICLE; // Sapphire
                     this.stopRiding();
                 }
 
@@ -2898,6 +2901,12 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public void ejectPassengers() {
+        // Sapphire start
+        ejectPassengers(null);
+    }
+
+    public void ejectPassengers(org.spigotmc.event.entity.EntityDismountEvent.DismountReason dismountReason) {
+        // Sapphire end
         for (int i = this.passengers.size() - 1; i >= 0; --i) {
             ((Entity) this.passengers.get(i)).stopRiding();
         }
@@ -2948,6 +2957,8 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     // Paper start
     protected boolean removePassenger(Entity entity) { return removePassenger(entity, false);}
     protected boolean removePassenger(Entity entity, boolean suppressCancellation) { // CraftBukkit
+        org.spigotmc.event.entity.EntityDismountEvent.DismountReason dismountReason = entity.dismountReason; // Sapphire
+        entity.dismountReason = null; // Sapphire
         // Paper end
         if (entity.getVehicle() == this) {
             throw new IllegalStateException("Use x.stopRiding(y), not y.removePassenger(x)");
@@ -2972,7 +2983,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
             }
             // CraftBukkit end
             // Spigot start
-            org.spigotmc.event.entity.EntityDismountEvent event = new org.spigotmc.event.entity.EntityDismountEvent(entity.getBukkitEntity(), this.getBukkitEntity(), !suppressCancellation); // Paper
+            org.spigotmc.event.entity.EntityDismountEvent event = new org.spigotmc.event.entity.EntityDismountEvent(entity.getBukkitEntity(), this.getBukkitEntity(), !suppressCancellation, dismountReason); // Paper // Sapphire
             // Suppress during worldgen
             if (this.valid) {
                 Bukkit.getPluginManager().callEvent(event);
@@ -4759,7 +4770,12 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
             this.stopRiding();
         }
 
-        if (reason != RemovalReason.UNLOADED_TO_CHUNK) this.getPassengers().forEach(Entity::stopRiding); // Paper - chunk system - don't adjust passenger state when unloading, it's just not safe (and messes with our logic in entity chunk unload)
+        // Sapphire start
+        if (reason != RemovalReason.UNLOADED_TO_CHUNK) this.getPassengers().forEach(entity -> { // Paper - chunk system - don't adjust passenger state when unloading, it's just not safe (and messes with our logic in entity chunk unload)
+            entity.dismountReason = org.spigotmc.event.entity.EntityDismountEvent.DismountReason.DEAD_VEHICLE;
+            entity.stopRiding();
+        });
+        // Sapphire end
         this.levelCallback.onRemove(reason);
         // Paper start - Folia schedulers
         if (!(this instanceof ServerPlayer) && reason != RemovalReason.CHANGED_DIMENSION && !alreadyRemoved) {
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index f0363fb325331b44b487f8b3f4956519a1871d6b..ad8b656fd7621ccf142209ff9672bbb93360d4be 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -451,6 +451,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
                 }
 
                 if (!this.level().isClientSide && this.isPassenger() && this.getVehicle() != null && this.getVehicle().dismountsUnderwater()) {
+                    this.dismountReason = org.spigotmc.event.entity.EntityDismountEvent.DismountReason.WATER; // Sapphire
                     this.stopRiding();
                 }
             } else if (this.getAirSupply() < this.getMaxAirSupply()) {
@@ -4244,6 +4245,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
 
     public void startSleeping(BlockPos pos) {
         if (this.isPassenger()) {
+            if (this instanceof net.minecraft.world.entity.player.Player) this.dismountReason = org.spigotmc.event.entity.EntityDismountEvent.DismountReason.PLAYER; // Sapphire
             this.stopRiding();
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index f6eb032897c6d5d16ab5c8c287e49e189c24571c..3f0a4ee2f0430c506d01608e71a47da169d6c2e9 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -1537,6 +1537,7 @@ public abstract class Mob extends LivingEntity implements Targeting {
         }
 
         if (this.isPassenger()) {
+            this.dismountReason = org.spigotmc.event.entity.EntityDismountEvent.DismountReason.LEASH; // Sapphire
             this.stopRiding();
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 58152160d609d0e9d105153aeb166a56a7955603..a76670f7242ac694dd5f643091e6a4165e915d77 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -519,6 +519,7 @@ public abstract class Player extends LivingEntity {
     @Override
     public void rideTick() {
         if (!this.level().isClientSide && this.wantsToStopRiding() && this.isPassenger()) {
+            this.dismountReason = org.spigotmc.event.entity.EntityDismountEvent.DismountReason.PLAYER; // Sapphire
             this.stopRiding();
             // CraftBukkit start - SPIGOT-7316: no longer passenger, dismount and return
             if (!this.isPassenger()) {
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
index 9948a28dae4edba877c13ef0156be5ff58df3fa2..75114ffa1bf569da3fc9470c0ba7bf46a38859f7 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
@@ -274,7 +274,7 @@ public abstract class AbstractMinecart extends Entity {
                         return true;
                     }
                     // CraftBukkit end
-                    this.ejectPassengers();
+                    this.ejectPassengers(org.spigotmc.event.entity.EntityDismountEvent.DismountReason.DEAD_VEHICLE); // Sapphire
                     if (flag && !this.hasCustomName()) {
                         this.discard();
                     } else {
diff --git a/src/main/java/net/minecraft/world/item/ChorusFruitItem.java b/src/main/java/net/minecraft/world/item/ChorusFruitItem.java
index d38161d6266c2460666434d5f0930ecf16096977..ba3d7eaa974505bb34da0e43478444387e041960 100644
--- a/src/main/java/net/minecraft/world/item/ChorusFruitItem.java
+++ b/src/main/java/net/minecraft/world/item/ChorusFruitItem.java
@@ -34,6 +34,7 @@ public class ChorusFruitItem extends Item {
                 double d5 = user.getZ() + (user.getRandom().nextDouble() - 0.5D) * 16.0D;
 
                 if (user.isPassenger()) {
+                    user.dismountReason = org.spigotmc.event.entity.EntityDismountEvent.DismountReason.TELEPORT; // Sapphire
                     user.stopRiding();
                 }
 
