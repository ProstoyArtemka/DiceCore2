From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: DenaryDev <denaryplanet@gmail.com>
Date: Fri, 11 Feb 2022 00:38:44 +0500
Subject: [PATCH] Chromium client support


diff --git a/src/main/java/io/sapphiremc/sapphire/SapphireCommand.java b/src/main/java/io/sapphiremc/sapphire/SapphireCommand.java
index c337948c82263af20e55570a2c65288aa0123334..e59f4a767d04046404c266bafba4ccc400dea306 100644
--- a/src/main/java/io/sapphiremc/sapphire/SapphireCommand.java
+++ b/src/main/java/io/sapphiremc/sapphire/SapphireCommand.java
@@ -7,6 +7,7 @@ import org.bukkit.Bukkit;
 import org.bukkit.Location;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
+import org.bukkit.entity.Player;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -63,6 +64,22 @@ public class SapphireCommand extends Command {
                     sender.sendMessage(prefix + "Sapphire config reload complete, but some functions need you to restart the server.");
                 }
             }
+            case "isChromium" -> {
+                if (args.length == 2) {
+                    Player player = Bukkit.getServer().getPlayer(args[1]);
+                    if (player != null) {
+                        if (player.usesChromiumClient()) {
+                            sender.sendMessage(prefix + "Player %s is using chromium client".formatted(args[1]));
+                        } else {
+                            sender.sendMessage(prefix + "Player %s isn't using chromium client".formatted(args[1]));
+                        }
+                    } else {
+                        sender.sendMessage(prefix + "Player %s is null".formatted(args[1]));
+                    }
+                } else {
+                    sender.sendMessage(prefix + "Usage: /sapphire isChromium <name>");
+                }
+            }
             case "ver", "version" -> {
                 if (args.length == 1) {
                     sender.sendMessage(prefix + "This server is running " + Bukkit.getName() + " version " + Bukkit.getVersion() + " (Git: " + getGitInfo() + ")");
@@ -74,7 +91,7 @@ public class SapphireCommand extends Command {
         return true;
     }
 
-    private final Collection<String> allAliases = Set.of("reload", "version", "ver");
+    private final Collection<String> allAliases = Set.of("reload", "isChromium", "version", "ver");
 
     @Override
     public @NotNull List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args, @Nullable Location location) throws IllegalArgumentException {
@@ -92,6 +109,20 @@ public class SapphireCommand extends Command {
                     .toList()
                 );
             }
+        } else if (args.length == 2) {
+            if (args[0].isEmpty()) {
+                aliases.addAll(Bukkit.getOnlinePlayers().stream()
+                    .map(Player::getName)
+                    .toList()
+                );
+            } else {
+                String arg = args[1];
+                aliases.addAll(Bukkit.getOnlinePlayers().stream()
+                    .map(Player::getName)
+                    .filter(s -> s.contains(arg))
+                    .toList()
+                );
+            }
         }
 
         return aliases;
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 9d46536f80b5b3e6641fd377c02166a431edfd77..c88e0aa5ee8a9c8d429d4dd2bab60343db3e1256 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -277,6 +277,7 @@ public class ServerPlayer extends Player {
     public final com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<ServerPlayer> cachedSingleHashSet; // Paper
     public PlayerNaturallySpawnCreaturesEvent playerNaturallySpawnedEvent; // Paper
     public org.bukkit.event.player.PlayerQuitEvent.QuitReason quitReason = null; // Paper - there are a lot of changes to do if we change all methods leading to the event
+    public boolean chromiumClient = false; // Sapphire
 
     private final java.util.concurrent.atomic.AtomicReference<io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.ViewDistances> viewDistances = new java.util.concurrent.atomic.AtomicReference<>(new io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.ViewDistances(-1, -1, -1));
     public io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.PlayerChunkLoaderData chunkLoader;
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 22d2e0e262cbc9b0c95e9978adf5561df4774d25..822152a8a9ea913fabe57a04e2d9d0efacc1eb70 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -3515,6 +3515,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
     private static final ResourceLocation CUSTOM_UNREGISTER = new ResourceLocation("unregister");
 
     private static final ResourceLocation MINECRAFT_BRAND = new ResourceLocation("brand"); // Paper - Brand support
+    private static final ResourceLocation CHROMIUM_CLIENT = new ResourceLocation("chromium", "client"); // Sapphire
 
     @Override
     public void handleCustomPayload(ServerboundCustomPayloadPacket packet) {
@@ -3539,6 +3540,13 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                 ServerGamePacketListenerImpl.LOGGER.error("Couldn\'t unregister custom payload", ex);
                 this.disconnect("Invalid payload UNREGISTER!", org.bukkit.event.player.PlayerKickEvent.Cause.INVALID_PAYLOAD); // Paper - kick event cause
             }
+        // Sapphire start
+        } else if (packet.identifier.equals(CHROMIUM_CLIENT)) {
+            try {
+                player.chromiumClient = true;
+            } catch (Exception ignored) {
+            }
+        // Sapphire end
         } else {
             try {
                 byte[] data = new byte[packet.data.readableBytes()];
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index dbdeb913e228651cadf5dbd7ec98afc738c80522..de84ed72fc444453dd3ed4e5ec8ca65fe17df47b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -3180,4 +3180,11 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         return this.spigot;
     }
     // Spigot end
+
+    // Sapphire start
+    @Override
+    public boolean usesChromiumClient() {
+        return getHandle().chromiumClient;
+    }
+    // Sapphire end
 }
